#!/bin/bash
#---------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
## cast is the spell installation utility
## It can be called by the user or by sorcery
##
##=head1 DESCRIPTION
##
## ...
##
##=head1 COPYRIGHT
##
## Original version Copyright 2001 by Kyle Sallee
## Some parts copyright 2002 Anders Bruun Olsen et al
## Other additions/corrections Copyright 2002 by the Source Mage Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#---------------------------------------------------------------------


function help()	{

  cat  <<  EOF

Cast installs single or multiple spells

Example:	cast  nano hdparm sudo
Usage:		cast  [parameters]  [spell]

Optional Parameters:

-q  |  --quiet			Do not be verbose, show less info
-t  |  --dot                    Display progress as dots, not percent

-f  |  --fix			Discover and fix broken spells
-n  |  --nofix			Discover, but do not fix broken spells

-d  |  --download		Force download of sources (overwrite existing files)

-s				Download 1st, cast 2nd
    |  --deps			Configure spells and determine dependencies,
				but do not cast.

-c  |  --compile		Ignore $INSTALL_CACHE and compiles
-r  |  --reconfigure		Select new dependencies for spells

       --from	directory	Specify an alternate for $SOURCE_CACHE
       --url	URL		Specify an alternate download URL

       --pam			Re-casts all installed spells that
				can use Linux-PAM

       --queue                  Casts all spells listed in $INSTALL_QUEUE

EOF

  exit  1

}



function set_failed_cast() {     # this is never called... erics (2004-01-28)

  debug "cast" "Function : set_failed_cast"

  if [[ $FAILED_CASTS ]] ; then
    FAILED_CASTS="$FAILED_CASTS $SPELL"
  else
    FAILED_CASTS="$SPELL"
  fi

  debug "set_failed_cast" "Value for FAILED CASTS : '$FAILED_CASTS'"

}

function set_successful_cast() {
  
  debug "cast" "Function : set_successful_cast"

  if [[ $SUCCESSFUL_CASTS ]] ; then
    SUCCESSFUL_CASTS="$SUCCESSFUL_CASTS $SPELL"
  else
    SUCCESSFUL_CASTS="$SPELL"
  fi

  debug "set_successful_cast" "Value for SUCCESSFUL CASTS : '$SUCCESSFUL_CASTS'"

}

function run_conflicts() {
    
     debug "cast" "Starting run_conflicts() on $SPELL"
    local CONFLICTS
    if    [  -x  $SCRIPT_DIRECTORY/CONFLICTS  ]; then
        CONFLICTS=$( source $SCRIPT_DIRECTORY/CONFLICTS )
        if [ $CONFLICTS ]; then
            message "${SPELL_COLOR}${SPELL} ${MESSAGE_COLOR}conflicts with:"
            message "${SPELL_COLOR}"
            echo "$CONFLICTS" | column
            message "${DEFAULT_COLOR}"
            if  query "Do you want to dispel these?" "n" 
            then
              dispel "$CONFLICTS"
            else
              echo $SPELL >> $FAILED_LIST
              return 1
            fi
        fi
     fi
 }


# checks for a security file
# returns 0 if spell should be cast, 1 otherwise
function run_security() {
    debug "cast" "Starting run_security() on $SPELL"
    if    [  -f  $SCRIPT_DIRECTORY/SECURITY  ]; then
      echo -e "${SPELL_COLOR}${SPELL}:${DEFAULT_COLOR}"
      tee -a $SECURITY_LOG < $SCRIPT_DIRECTORY/SECURITY
        if [ `grep critical $SCRIPT_DIRECTORY/SECURITY` ]; then
          if query "${RED}SECURITY CRITICAL:${QUERY_COLOR} Do you still want to cast ${SPELL_COLOR}${SPELL}${DEFAULT_COLOR}?" "n"; then
            return 0
          fi
          return 1
        else
          if query "SECURITY: Do you still want to cast ${SPELL_COLOR} $SPELL ${QUERY_COLOR}?" "y"; then
            return 0
          fi
          return 1
        fi
    fi
    return 0
}


function prepare_spell_config()  {

  SPELL_CONFIG=$DEPENDS_CONFIG/$SPELL
  if  !  [  -x  $SPELL_CONFIG  ];  then
    touch       $SPELL_CONFIG
    chmod  a+x  $SPELL_CONFIG
  fi

  . $SPELL_CONFIG

}

function use_xinetd()  { (

  debug "cast" "In use_xinetd()"
  
  if  [  -d  $SCRIPT_DIRECTORY/xinetd.d  ]  &&
      !  grep  -q  "SERVICES="  $SPELL_CONFIG
  then

    debug "cast" "use_xinetd: found an xinetd directory - processing"
    ALL_SERVICES=`cat  $SCRIPT_DIRECTORY/xinetd.d/*  |
                  grep  "service"                    |
                  sed   "s/service //"`
                  
    debug "cast" "use_xinetd: ALL_SERVICES: '$ALL_SERVICES'"

    # only looking for services to install, non-selected services
    # will be installed and disabled in install_xinetd_confs().
    for  SERVICE  in  $ALL_SERVICES;  do
      if    query  "Invoke $SERVICE via xinetd?"  y
      then 
        SERVICES="$SERVICE $SERVICES"
      else
        SERVICES_DISABLE="$SERVICE_DISABLE $SERVICES_DISABLE" 
      fi
    done

    debug "cast" "use_xinetd: to install SERVICES: '$SERVICES'"
    debug "cast" "use_xinetd: to disable SERVICES_DISABLE: '$SERVICES_DISABLE'"
    debug "cast" "setting up depends for services"

    for  SERVICE  in  $SERVICES;  do
      for  FILE  in  `ls  $SCRIPT_DIRECTORY/xinetd.d/*`;  do

         if  grep  -q   "service $SERVICE"  $FILE   &&
             grep  -q   "stunnel"           $FILE;  then
           add_depends  "$SPELL"  "stunnel"  "on"  "optional"
         fi

      done
    done

    if    [  -n  "$SERVICES"  ]
    then  add_depends  "$SPELL"  "xinetd"  "on"   "optional"
    else  add_depends  "$SPELL"  "xinetd"  "off"  "optional"
    fi

    echo  "SERVICES=\"$SERVICES\""  >>  $SPELL_CONFIG
		echo  "SERVICES_DISABLE=\"$SERVICES_DISABLE\""  >> $SPELL_CONFIG

  fi

) }

function install_xinetd() { (

  if  [  -d  $SCRIPT_DIRECTORY/xinetd.d  ] 
  then
		
    SERVICES=""          # services to be installed.
		SERVICES_DISABLE=""  # services not to install.
    . $SPELL_CONFIG
    debug "cast" "use_xinetd: about to call install_xinetd_confs"

		if  [  -n  "$SERVICES"  ] ; then
			message "services is : $SERVICES so calling install xinetd confs"
  		# now we install the selected services.
			install_xinetd_confs $SERVICES
		fi
	fi
) }

# Automagic initscript installation.
function use_initd()  { (

  debug "cast" "In use_initd()"

  INITDSCRIPTS=""
  INITDSCRIPTS_DISABLED=""

  if  [  -d  $SCRIPT_DIRECTORY/init.d  ]  ; then
    debug "cast" "use_initd: found an init.d directory - processing"

    . $SPELL_CONFIG

    local ALL_INITSCRIPTS=`ls  $SCRIPT_DIRECTORY/init.d/ | grep  -v  '\.conf$'`
    debug "cast" "use_initd: ALL_INITSCRIPTS: '$ALL_INITSCRIPTS'"

    for  INITSCRIPT  in  $ALL_INITSCRIPTS  ;  do
      echo  "$INITDSCRIPTS $INITDSCRIPTS_DISABLED"  |  \
          grep  -Eq  "( |^)$INITSCRIPT( |$)"  &&  continue

      if  query  "Invoke $INITSCRIPT at boot via init?"  y  ;  then
        INITDSCRIPTS="$INITSCRIPT $INITDSCRIPTS"
        init_prepare_install  $INITSCRIPT
      else
        INITDSCRIPTS_DISABLED="$INITSCRIPT $INITDSCRIPTS_DISABLED"
      fi
    done
  fi
    
  tmp=$(  grep  -v  -e '^INITDSCRIPTS='  -e '^INITDSCRIPTS_DISABLED='  \
      $SPELL_CONFIG )
  echo "$tmp" > $SPELL_CONFIG
  echo  "INITDSCRIPTS=\"$INITDSCRIPTS\""  >>  $SPELL_CONFIG
  echo  "INITDSCRIPTS_DISABLED=\"$INITDSCRIPTS_DISABLED\"" >> $SPELL_CONFIG
) }

function install_initd() { (
    debug "cast" "use_initd: to install INITDSCRIPTS: '$INITDSCRIPTS'"
    debug "cast" "use_initd: to disable INITDSCRIPTS_DISABLED: '$INITDSCRIPTS_DISABLED'"
    debug "cast" "saving initscripts"
    
    INITDSCRIPTS=""
    INITDSCRIPTS_DISABLED=""
    . $SPELL_CONFIG

#    local ALL_INITSCRIPTS=`ls  $SCRIPT_DIRECTORY/init.d/ | grep  -v  '\.conf$'`
    # now we install the selected scripts.
    if  [  -n  "$INITDSCRIPTS"  ] ; then
      debug "cast" "use_initd: about to call install_initd_confs"
      install_initd_confs enabled $INITDSCRIPTS
    fi

    # and disable the others.
    if  [  -n  "$INITDSCRIPTS_DISABLED"  ] ; then
      debug "cast" "use_initd: about to disable : '$INITDSCRIPTS_DISABLED'"
      install_initd_confs disabled $INITDSCRIPTS_DISABLED
    fi
    
) }

function run_pre_build() {

  debug "cast" "run_pre_build()"
  message  "${MESSAGE_COLOR}Building"  \
           "${SPELL_COLOR}${SPELL}"    \
           "${DEFAULT_COLOR}"

  cd  $BUILD_DIRECTORY

  verify_sources &&
  if  [  -x  $SCRIPT_DIRECTORY/PRE_BUILD  ];  then
    debug "cast" "run_pre_build() - Prebuild script exists, now sourcing "
    . $SCRIPT_DIRECTORY/PRE_BUILD
  else
    debug "cast" "run_pre_build() - Prebuild script not found, using default"
    default_pre_build
  fi
}


function create_compile_log()  {

  message  "${MESSAGE_COLOR}Creating"                        \
           "${FILE_COLOR}$COMPILE_LOGS/$SPELL-$VERSION.bz2"  \
           "${DEFAULT_COLOR}"

  bzip2  -9f  <  $C_LOG  >  $COMPILE_LOGS/$SPELL-$VERSION.bz2
  rm             $C_LOG
  rm             $C_FIFO

}


function view_compile_log()  {

    sleep   1
    report              $C_LOG  "Compile log"

}


function activate_voyeur()  {

  if  [  -z  "$SILENT"  ];  then
    case  $VOYEUR  in
      on)  tee  -a  $C_LOG  <  $C_FIFO              &  ;;
       *)  tee  -a  $C_LOG  <  $C_FIFO  >/dev/null  &  ;;
    esac
  else     tee  -a  $C_LOG  <  $C_FIFO  >/dev/null  &
  fi

}


function run_build()  {

  debug "cast" "Starting run_build()"
   C_LOG=/tmp/$SPELL.compile.log
  C_FIFO=/tmp/$SPELL.compile.fifo

  rm  -f $C_FIFO
  mkfifo  $C_FIFO
  rm  -f $C_LOG
  echo  "Compile log for $SPELL  $VERSION  Built on `date  -u`"  >  $C_LOG
  echo  "Using gcc version: `gcc -dumpversion`" >> $C_LOG

  activate_voyeur

  [  -d  "$SOURCE_DIRECTORY"  ]  &&
  cd      $SOURCE_DIRECTORY

  invoke_build_dir
  invoke_gcc2
  optimize
  invoke_installwatch

  message -n "Installing in dir: "
  pwd
  message "$SPELL    $VERSION"
  if  [ -x ./configure ] || [ -x ./src/configure ] ; then
		
    if  [[  $CONFIG_LOC  == on  ]]; then

      if  [  !  -d  $SM_CONFIG_OPTION_CACHE  ] ; then
        mkdir --parents --mode=0755 $SM_CONFIG_OPTION_CACHE
      fi

      if  [  -f $SM_CONFIG_OPTION_CACHE/$SPELL  ] ; then
        message "${MESSAGE_COLOR}These are your current -- config options for spell ${SPELL_COLOR}$SPELL"
        message "${FILE_COLOR}($SM_CONFIG_OPTION_CACHE/$SPELL)"
        cat $SM_CONFIG_OPTION_CACHE/$SPELL | column
      fi

      if    query  "Do you wish to add -- options to ./configure?"  n ;  then
				F_TMP=/tmp/cast.$$.configure
        rm -f $F_TMP
				
        if [ -x ./configure ]; then
          ./configure --help > $F_TMP
        elif [ -x ./src/configure ]; then
          ./src/configure --help > $F_TMP
        fi

        if [ -f $F_TMP ]; then
          sedit 's/^/# /' $F_TMP
        fi

        cat $SM_CONFIG_OPTION_CACHE/$SPELL >> $F_TMP 2>/dev/null
        edit_file $F_TMP
        rm -f $SM_CONFIG_OPTION_CACHE/$SPELL
        sedit '/^#.*$/d' $F_TMP
        mv $F_TMP $SM_CONFIG_OPTION_CACHE/$SPELL
      fi

      # load custom OPTS
      if  [  -f $SM_CONFIG_OPTION_CACHE/$SPELL  ];  then
        OPTS="$OPTS $(cat $SM_CONFIG_OPTION_CACHE/$SPELL)"
        message "${MESSAGE_COLOR} OPTS= ${DEFAULT_COLOR}$OPTS"
      fi

    fi

  fi

  if  [  -x  $SCRIPT_DIRECTORY/BUILD  ];  then
    .  $SCRIPT_DIRECTORY/BUILD
  else
    default_build
  fi &&

  install_xinetd &&
  install_initd

  if  [  "$?"  ==  0  ];  then
    create_compile_log
  else
    sound  FAILURE
    message  "${PROBLEM_COLOR}"      \
             "! Problem Detected !"  \
             "${DEFAULT_COLOR}"
    view_compile_log
    create_compile_log
    false
  fi

}


function run_post_build() {

  if  [  -x  $SCRIPT_DIRECTORY/POST_BUILD  ];  then
           . $SCRIPT_DIRECTORY/POST_BUILD
  else
    default_post_build
  fi

  # Lock made in prepare_install
  unlock_resources "libgrimoire" "install"

}


function run_post_install() {

  if    [  -x  $SCRIPT_DIRECTORY/POST_INSTALL  ]
  then       . $SCRIPT_DIRECTORY/POST_INSTALL
  fi

  if    [  -x  $SCRIPT_DIRECTORY/TRIGGERS  ]
  then       . $SCRIPT_DIRECTORY/TRIGGERS
  fi

}


function lib_dirs()  {

  for  DIRECTORY  in  $*;  do
    for FILE in $DIRECTORY/*.so* ; do
      if file -b "$FILE" | grep  -q  "shared object" ; then
        echo -n "$DIRECTORY:"
	break
      fi
    done
  done

}


function export_ld()  {

  if    [  -z  "$LD_LIBRARY_PATH"  ] ; 
  then  export   LD_LIBRARY_PATH="$( lib_dirs  $*  )"
  else  export   LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$(  lib_dirs  $*  )"
  fi
  
  export LD_LIBRARY_PATH=`cat /etc/ld.so.conf | tr '[:blank:][:cntrl:]' ':'`$LD_LIBRARY_PATH


}


function ldd_check()  {  (

  if  [  "$LDD_CHECK"  ==  "off"    ] ;  then
    return
  fi

     SPELL=$1
     VERSION=`installed_version  $SPELL`
       I_LOG=$INSTALL_LOGS/$SPELL-$VERSION
  LDD_STATUS=0

  if  [  -e  $I_LOG  ];  then

    LOG=`cat   $I_LOG                               |
         grep      "/bin/\|/games/\|/lib/\|/sbin/"  |
         grep  -v  "/doc/\|/fonts/\|/include/\|/locale/\|/man/\|/modules/\|/var/"`
    
    let size=0
    for FILE in $LOG ; do
    	let size++
    done

    let count=0
    for  FILE  in  $LOG;  do

      if  [  -z  "$QUIET"  ];  then
        progress_bar $DOT_PROGRESS $count $size 50
      fi
      let count++

      if     [  -f  "$FILE"  ]     &&
          !  [  -h  "$FILE"  ]     &&
          file  -b  "$FILE"        |
          grep  -q  "ELF"          &&
          ldd       "$FILE"  2>&1  |
          grep  -q  "not found"
      then
        (
	   clear_line
           message  "${FILE_COLOR}${FILE}"       \
                    "${DEFAULT_COLOR}of"         \
                    "${SPELL_COLOR}${SPELL}"     \
                    "${PROBLEM_COLOR}is broken."  \
                    "${DEFAULT_COLOR}"
           ldd      "$FILE" 2>&1 | grep  "not found"
        )
        LDD_STATUS=1
      fi
    done
	clear_line
  fi
  return  $LDD_STATUS

) }


function find_check()  { (

  if  [  "$FIND_CHECK"  ==  "off"             ]   ||
      [  "$1"           ==  "xfree86"         ]   ||
      [  "$1"           ==  "xfree86-devel"         ]   ||
      [  "$1"           ==  "xfree86-custom"  ];  then
    return
  fi

        SPELL=$1
      VERSION=`installed_version  $SPELL`
        I_LOG=$INSTALL_LOGS/$SPELL-$VERSION
  FIND_STATUS=0

  if  [  -e  $I_LOG  ];  then

    LOG=`cat   $I_LOG                                          |
         grep      "/bin/\|/games/\|/include/\|/lib/\|/sbin/"  |
         grep  -v  "/doc/\|/etc/\|/fonts/\|/man/\|/var/"`

    let size=0
    for FILE in $LOG ; do
    	let size++
    done

    let count=0
    for  ITEM  in  $LOG;  do

      if  [  -z  "$QUIET"  ];  then
        progress_bar $DOT_PROGRESS $count $size 50
      fi
      let count++
      
      
      if  [  -e  "$ITEM"  ];  then
        true
      else
        (
	   clear_line
           message  "${FILE_COLOR}${ITEM}"       \
                    "${DEFAULT_COLOR}of"           \
                    "${SPELL_COLOR}${SPELL}"       \
                    "${PROBLEM_COLOR}is missing."  \
                    "${DEFAULT_COLOR}"
        )
        FIND_STATUS=1
      fi
    done
	clear_line
  else
    (
       message  "${SPELL_COLOR}${SPELL} "                     \
                "${PROBLEM_COLOR}is missing an install log."  \
                "${DEFAULT_COLOR}"
    )
    FIND_STATUS=1
  fi
  return  $FIND_STATUS

) }


function show_owner()  {

  OWNER=`grep  $TARGET  $INSTALL_LOGS/*  |
         cut  -d :  -f1                  |
         sed  -n  1p`

  if  [  -n  "$OWNER"  ];  then  echo  "`basename  $OWNER`"
                           else  echo  "nobody"
  fi

}


function remove_line()  {

  F_TMP=/tmp/`basename  $I_LOG`.$$.$RANDOM

  cp         $I_LOG  $F_TMP
  grep  -v   $ITEM   $F_TMP  >  $I_LOG
  rm    -rf          $F_TMP

  message  "Symbolic link: ${SYMLINK_COLOR}${ITEM}${DEFAULT_COLOR}"  \
           "is owned by ${SPELL_COLOR}${SPELL}${DEFAULT_COLOR}"

  message  "Target of symbolic link is ${FILE_COLOR}${TARGET}${DEFAULT_COLOR}"

  message  "${FILE_COLOR}${TARGET}${DEFAULT_COLOR} is owned by `show_owner`"

  message  "Removed: ${SYMLINK_COLOR}${ITEM}${DEFAULT_COLOR} from ${I_LOG}"

}


function sym_check()  { (

  if  [  "$SYM_CHECK"  ==  "off"  ];  then
    return
  fi

      SPELL=$1
      VERSION=`installed_version  $SPELL`
        I_LOG=$INSTALL_LOGS/$SPELL-$VERSION

  if  [  -e  $I_LOG  ];  then

    LOG=`cat   $I_LOG`

    let size=0
    for FILE in $LOG ; do
    	let size++
    done

    let count=0
    for  ITEM  in  $LOG;  do

      if  [  -z  "$QUIET"  ];  then
        progress_bar $DOT_PROGRESS $count $size 50 
      fi
      let count++
      
      if  [  -h  "$ITEM"  ]  &&
          [  -f  "$ITEM"  ]
      then

      TARGET=$(  basename  $(  ls   -la  "$ITEM"  |
                               cut  -d  '>'  -f2  |
                               cut  -c  2-
                            )
              )

        if  !  grep  -q  "$TARGET"  $I_LOG
        then  (  remove_line  )
        fi

      fi
    done
	clear_line
  fi

) }


md5sum_check()  { (

  if  [  "$MD5SUM_CHECK"  ==  "off"  ];  then
    return
  fi

  SPELL=$1
  VERSION=`installed_version  $SPELL`
  MD5_LOG="$MD5SUM_LOGS/$SPELL-$VERSION"

  MD5SUM_STATUS=0

  if  [  -e  $MD5_LOG  ];  then

    OUTPUT=`cat  $MD5_LOG                                         |
            grep      "/bin/\|/games/\|/include/\|/lib/\|/sbin/"  |
            grep  -v  "/doc/\|/etc/\|/fonts/\|/man/\|/var/"       |
            md5sum  --check  2>/dev/null                          |    
            grep   -v       ": OK"                                |
            cut    -d :  -f1`

    if  [  -n  "$OUTPUT"  ];  then
    
      let size=0
      for FILE in $LOG ; do
      	let size++
      done

      let count=0
      for  FILE  in  $OUTPUT;  do

        if  [  -z  "$QUIET"  ];  then
          progress_bar $DOT_PROGRESS $count $size 50 
        fi
        let count++
      
        if     [  -f  "$FILE"  ]  &&
            !  [  -h  "$FILE"  ]  &&
            file  -b  "$FILE"     |
            grep  -q  "ELF"
        then
          MD5SUM=`md5sum  $FILE`
          if  !  grep  -q  "$MD5SUM"  $MD5SUM_LOGS/*;  then
            (
	       clear_line
               message  "${FILE_COLOR}${FILE}"               \
                        "${DEFAULT_COLOR}of"                 \
                        "${SPELL_COLOR}${SPELL}"             \
                        "${PROBLEM_COLOR}has wrong md5sum."  \
                        "${DEFAULT_COLOR}"
            )
            MD5SUM_STATUS=1
          fi
        fi
      done
	  clear_line
    fi
  else
    (
       message  "${SPELL_COLOR}${SPELL} "                   \
                "${PROBLEM_COLOR}is missing a md5sum log."  \
                "${DEFAULT_COLOR}"
    )
    MD5SUM_STATUS=1
  fi
  return  $MD5SUM_STATUS

) }


function status_okay()  {

  spell_installed  $1  ||
  spell_held       $1

}


function run_checks()  {

  if  [ -z  "$QUIET"  ]; then
    progress_bar $DOT_PROGRESS 1 1 50 
  fi

  #Note: check to see if these should all be joined by &&
     sym_check  $1
    find_check  $1  &&
     ldd_check  $1  &&
  md5sum_check  $1

}


function run_fix()  { (

  SPELLS=$*

  if  [  -z  "$QUIET"  ];  then
    if  [  -z  "$PASS_ZERO"  ]  &&  [  -z  "$CAST_PASS"  ];  then
      message  "${CHECK_COLOR}Initiating integrity check, please wait..."  \
               "${DEFAULT_COLOR}"
    fi
  fi

  if  [  -z  "$SPELLS"  ];  then


    # Why are these special cases? (duff, 09/29)
    # Because we want to always check them first?
    if    spell_installed  xfree86
    then  SPELLS="glibc xfree86"
    elif  spell_installed xfree86-devel
    then  SPELLS="glibc xfree86-devel"
    else  SPELLS="glibc"
    fi

    #was $SPELL_STATUS_BACKUP (2002/09/29)
    SPELLS="$SPELLS $(  awk -F : '{print $1; }' $SPELL_STATUS |
                        grep  -v  'glibc|xfree86|xfree86-devel|sorcery|j2sdk'   )"
  fi

  if  [  -z  "$QUIET"  ];  then
    progress_bar $DOT_PROGRESS 1 5 50 
  fi

  PASSED=":"

  if    [  "$LDD_CHECK"  ==  "on"    ]
  then  LD_LIBRARY_PATH_OLD="$LD_LIBRARY_PATH"
        if  [  -z  "$QUIET"  ];  then
         progress_bar $DOT_PROGRESS 2 5 50 
          wait_flag_up
          wait_flag  $$  &
        fi
        export_ld  $(  find  /usr/lib  -type  d  ! -empty  )
        if  [  -z  "$QUIET"  ];  then
          wait_flag_down
        fi
  fi

  until  [  "$FIXED"     ==  "yes"  ]   ||
         [  "$HOPELESS"  ==  "yes"  ];  do

       FIXED="yes"
    HOPELESS="no"

    if  [  -z  "$QUIET"  ];  then
      progress_bar $DOT_PROGRESS 3 5 50 
    fi

    for  SPELL  in  $SPELLS;  do

      if  [  -z  "$QUIET"  ];  then
        progress_bar $DOT_PROGRESS 4 5 50 
      fi

      if  status_okay  $SPELL  &&
          !  echo  $PASSED     |
             grep  -q  ":`esc_str $SPELL`:";  then

        if  [  -z  "$QUIET"  ];  then
          progress_bar $DOT_PROGRESS 5 5 50 
		  clear_line 
          message    "${CHECK_COLOR}Checking integrity of"  \
                     "${SPELL_COLOR}${SPELL}"               \
                     "${DEFAULT_COLOR}"
        else
          message  "${CHECK_COLOR}Checking integrity of"  \
                   "${SPELL_COLOR}${SPELL}"               \
                   "${DEFAULT_COLOR}"
        fi

        if    run_checks     $SPELL  ||
              [  -n  "$NOFIX"  ]
        then
          PASSED="$PASSED$SPELL:"
        else

          FIXED="no"
          (  run_details
             satisfy_depends
             unset  FIX
             satisfy_depends
          )

          if  [  "$LDD_CHECK"  ==  "on"    ] ;  then
            export  LD_LIBRARY_PATH="$LD_LIBRARY_PATH_OLD"
            export_ld  $(  find  /usr/lib  -type  d  ! -empty  )
          fi

          if    run_checks     $SPELL  ||
                [  -n  "$NOFIX"  ]
          then

            PASSED="$PASSED$SPELL:"
            if  [  "$LDD_CHECK"  ==  "on"    ] ;  then
              export  LD_LIBRARY_PATH="$LD_LIBRARY_PATH_OLD"
              export_ld  $(  find  /usr/lib  -type  d  ! -empty  )
            fi

          else
            unset  FIX
            if    !  cast  --compile  $SPELL;  then  HOPELESS="yes"
            elif  !  run_checks       $SPELL;  then  HOPELESS="yes"
            fi
            export  FIX="--fix"
          fi
        fi
      fi
    done
  done
  rm  -f  /tmp/LD_LIBRARY_PATH_FILE

) }


function process_parameters()  {

  while  [  -n  "$1"  ];  do

    if  echo  "" $1  |  grep  -q  "^ -";  then

      case  $1  in

          -q|--quiet)  QUIET="yes"                ;      shift 1  ;;
	    -t|--dot)  export DOT_PROGRESS='-dot' ;      shift 1  ;;
              --deps)  export  DEPS_ONLY="$1";           shift 1  ;;
    -r|--reconfigure)  RECONFIGURE="$1";                 shift 1  ;;
        -c|--compile)  COMPILE="$1";                     shift 1  ;;
       -d|--download)  export  FORCE_DOWNLOAD="$1";      shift 1  ;;
              --from)  export  SOURCE_CACHE=$2;          shift 2  ;;
            --silent)  SILENT="$1";                      shift 1  ;;
            -f|--fix)  export  FIX="$1";                 shift 1  ;;
          -n|--nofix)  export  FIX="--fix"
                       export  NOFIX="$1";               shift 1  ;;
                  -s)  SEPARATE="$1";                    shift 1  ;;
               --url)  export  BASE_URL="$2";            shift 2  ;;
               --pam)  cast  -c  `find_pam_aware` ;      shift 1  ;;
             --queue)  
                       if query "Would you like review the queue history for each spell?" n ; then
                         sorcery review-queue
                       fi

                       if [ -z $QUIET ]; then
                         list_install_queue
                       fi
                         
                       if  [  -s $INSTALL_QUEUE  ]; then
                         message -n "${MESSAGE_COLOR}Casting install queue..."
                         message    "${DEFAULT_COLOR}"

                         # remove possible empty lines from queue.
                         grep -Ev '^$' $INSTALL_QUEUE >"$INSTALL_QUEUE.new"
                         rm -f "$INSTALL_QUEUE"
                         mv "$INSTALL_QUEUE.new" "$INSTALL_QUEUE"

                         # cast the queue.
                         cast -c `cat $INSTALL_QUEUE 2>/dev/null`
												 
                         # report spells still in queue.
                         if  [  -s  $INSTALL_QUEUE  ] ; then
                           message "${MESSAGE_COLOR}The install queue is not empty, "
                           message "it still contains the following spells: "
                           message "---------------------------------${PROBLEM_COLOR}"
                           message "`cat $INSTALL_QUEUE 2>/dev/null`"
                           message "${DEFAULT_COLOR}"
                         fi
                       fi;                               
                       shift 1                                ;;
                   *)  help                                   ;;
      esac

    else

      shift
 
   fi

  done

}


function strip_parameters()  {

  while  [  -n  "$1"  ];  do

    if  echo  "" $1  |  grep  -q  "^ -";  then

      case  $1  in

                  --deps)  shift 1  ;;
	        -d|--dot)  shift 1  ;;
        -r|--reconfigure)  shift 1  ;;
                  --from)  shift 2  ;;
                --silent)  shift 1  ;;
                -f|--fix)  shift 1  ;;
              -n|--nofix)  shift 1  ;;
            -c|--compile)  shift 1  ;;
                      -s)  shift 1  ;;
                   --url)  shift 2  ;;
                   --pam)  shift 1  ;;
		 --queue)  shift 1  ;;
                       *)  shift 1  ;;

      esac

    else

      echo  $1
      shift
 
   fi

  done

}

function can_resurect()  {
	debug "cast" "can_resurect - $*"
	run_details		&&
	[ -f $INSTALL_CACHE/$SPELL-$VERSION-$BUILD.tar.bz2 ] &&
	debug "cast" "I am able to resurect."
}


function resurrect()  {  (  

  debug "cast" "resurect - $*"

  run_prepare   &&
  can_resurect
#  run_details  run by can_resurect now

  STATUS=installed

  if  spell_held  $SPELL;  then
    VERSION=`installed_version  $SPELL`
     STATUS=held
    dispel --notriggers $SPELL
  fi

  CACHE_BZ="$INSTALL_CACHE/$SPELL-$VERSION-$BUILD.tar.bz2"

  if bzip2  -tf  $CACHE_BZ ; then
    
    run_conflicts    &&
    satisfy_depends  &&
    bzip2         -cd   $CACHE_BZ  |  tar  -Pkx  1>/dev/null  2>&1
    run_post_install #bug 199
    
    add_spell     "$SPELL"  "$STATUS"  "$VERSION"
    pop_install_queue "$SPELL"
    activity_log  "cast"  "$SPELL"  "$VERSION"  "success"
    set_successful_cast  "$SPELL"
    clear_line
    message  "${RESURRECT_COLOR}Resurrected spell:"  \
             "${SPELL_COLOR}${SPELL}"                \
             "${DEFAULT_COLOR}"                      \
             "version"                               \
             "${VERSION_COLOR}${VERSION}"            \
             "${DEFAULT_COLOR}"
    cast  --fix  $SILENT  $SPELL && echo $SPELL >> $SUCCESS_LIST
  else
    echo $SPELL >> $FAILED_LIST
    false
  fi

)  }


function show_download_progress()  {

  if  [  -f  "$D_LOG"   ]   &&
      [  -z  "$SILENT"  ];  then

    LC_OLD=${LC_OLD:-0}

    LC=`cat  $D_LOG  2>/dev/null  |  wc  -l  |  tr  -d ' '`

    if  [  "$LC"  !=  "$LC_OLD"  ];  then
      ((  LC_OLD++  ))
      sed  -n ${LC_OLD},${LC}p  $D_LOG
      LC_OLD=$LC
    fi

  fi

}


function show_downloading()  {

#  COMPILE="y"
  debug "cast" "Started show_downloading() on $SPELL"
  while ! ( [[ $D_LOG ]] && 
            [  -f "$D_LOG"  ] ) 
  do
    sleep 1
  done

  #The file is created in run_summon
  until [  -f "${D_LOG}.done.$SPELL"  ] ;  do
    show_download_progress
    sleep 1
  done
  
  rm "${D_LOG}.done.$SPELL"
  show_download_progress

}


function report_install()  {

#  rm  -f  $BOOST_LOCK
  INST_LOG=$INSTALL_LOGS/$SPELL-$VERSION
  report  $INST_LOG  "Install log"

}




function cast_spell()  { (

  debug "cast" "Casting spell [$SPELL]"
  set_term_title "Casting spell [$SPELL]"
  run_details                                 && #run by can_resurect now, but it's a minor expense
  run_security                                &&
  run_conflicts                               &&
  run_spell_config                            &&
  satisfy_depends             && #needed or optional deps dont get passed??
  show_downloading            && 
  verify_sources              ||   return 1
  
  #locking - blocks normal spells if a solo cast is running, solo casts if any cast is running
  message "Waiting for any ${FILE_COLOR}Solo${DEFAULT_COLOR} casts to complete..."
  lock_resources "solo" "cast"
  if grep -q "^$SPELL$" $SOLO || [ -f $SCRIPT_DIRECTORY/SOLO ]
  then #SOLO spell
    message -n "Waiting for ${SPELL_COLOR}all other${DEFAULT_COLOR} spells to complete..."
    excllock_resources "cast" "$SPELL"
  else
    message -n "Waiting for any other casts of ${SPELL_COLOR}$SPELL${DEFAULT_COLOR} to complete..."
    lock_resources "cast" "$SPELL"
    unlock_resources "solo" "cast"
  fi
  message " done."
                               
  if    run_pre_build              			&&
		run_build                   		&&
		run_post_build              		&&
		run_post_install            		&&
		add_spell $SPELL installed $VERSION	&&
		cd  /                       		&&
		report_install						;
  then
		sound  SUCCESS
    pop_install_queue "$SPELL"    
		activity_log  "cast"  "$SPELL"  "$VERSION"  "success"
	    rm_source_dir
		echo $SPELL >> $SUCCESS_LIST
  else
    # This may have been locked if there was a failure during the install
    unlock_resources "libgrimoire" "install"
	
    activity_log "cast" "$SPELL"  "$VERSION" "failure"
	  IW_LOG="$INSTALLWATCHFILE"
	  INSTALLWATCHFILE=""
    rm  -f  $IW_LOG  $TMP_LOG  $CASTING
    [[  $CLEAN_SOURCE == on ]] && rm_source_dir
    echo $SPELL >> $FAILED_LIST
    CAST_EXIT_STATUS=1
  fi

  unlock_resources "cast" "$SPELL"
  #It's OK to try to release a lock you don't have
  unlock_resources "solo" "cast"

  return ${CAST_EXIT_STATUS:-0}

) }

##Removed *_solo functions, Duff 2002/11/01

function current_sources()  {

  spell_installed  $SPELL  &&
  [  "$VERSION"  ==  "`installed_version  $SPELL`"  ]

}


function run_summon()  {

  touch $D_LOG
  if 	[[ $COMPILE ]] 			|| 
  		[[ $FORCE_COMPILE ]] 	|| 
		! current_sources 		|| 
		! (spell_installed $SPELL || spell_held $SPELL) 
  then
    lock_file   $D_LOG
    
    ( . summon  $SPELL  >>  $D_LOG  2>&1 )
    
    unlock_file $D_LOG
  fi
  
  #This is to notify show_downloading that it is done this source
  touch "${D_LOG}.done.$SPELL"

}

function pass_one()  {
  #  This pass does configuration and dependency identification.
  debug "cast" "Starting pass_one()"

  local i j tempList SPELL_RULES=""
  local numRules=0

  compute_depends "SPELL_RULES" $SPELLS

  message "${MESSAGE_COLOR}Collating dependancies...${DEFAULT_COLOR}"
  echo "$SPELL_RULES" | depends_to_Makefile $numRules $SPELLS > $MAKEFILE

  if  [  -n  "$DEPS_ONLY"  ] ;  then  
   	for i in $SPELLS ; do
	  #BUG: $i=="foo" and "foobar" is also to be built it will remove foobar too"
	  sed -e 's/cast .* $i.*/true/' $MAKEFILE > $MAKEFILE.2
	  mv $MAKEFILE.2 $MAKEFILE
   	done  
  fi
  
  SPELLS=`sed -n 's/^\([^:]*\):.*$/\1/p' $MAKEFILE | grep -v "^all$" | grep -v "^.PHONY$"`

  debug "cast" "pass_one, done with SPELLS=$SPELLS"

}

function depends_to_Makefile()
{
	debug "cast" "depends_to_Makefile - $*"
	local spell all_spells=""
	local tmp_list i
	local LINE=""
	local args
	tmp_list=""
	
	[[ $COMPILE ]] && args="-c "

	while read LINE ; do

		[[ $LINE ]] || continue		#Remove blank lines
		spell=${LINE%%:*}
		all_spells="$all_spells $spell"
		echo "$LINE"
		echo -e "\t@$0 $args $spell"
		echo
		
		for (( i=1 ; i <= $# ; i++ )) ; do
			[[ ${!i} == $spell ]] && tmp_list="$tmp_list $spell"
		done
		
	done
	
	echo "all: $tmp_list"
	echo

        # All targets are PHONY
        # See http://bugs.sourcemage.org/show_bug.cgi?id=2674 for details
        echo ".PHONY: all $all_spells"
        echo

#	export SPELLS="$all_spells"
	
}


#A bit of a misnomer, eh? Doesn't build anything, just summons it.
function build_sources()  {

  for  SPELL  in  $SPELLS;  do
    ( run_details                       &&
#      satisfy_depends  && (duff, probably not needed 10/07)
      run_summon
      debug "cast" "Out of run_summon."
    )
  done

}


function pass_two()  {
  #  This pass downloads required sources.
  #  And starts the make process
  debug "cast" "Starting pass_two()"

  message "${MESSAGE_COLOR}Spells are to be cast:${DEFAULT_COLOR}"
  message "---------------------------"
  message "${SPELL_COLOR}${*}" | tr '[:blank:]' '\n' | column 
  message "${DEFAULT_COLOR}"
  
  if ! query "Do you want to cast these spells?" "y" ; then
  	message "Ok, quitting cast. Figure out what you want."
	return 1
  fi
  
  #make: -k keep going even if there's an error, -s silent, -f <file>
  if  [[  $SEPARATE   ]] ; then
    ( CAST_PASS="three" ; /usr/bin/make -j1 -k -f $MAKEFILE all )
  else
    ( CAST_PASS="three" ; /usr/bin/make -j1 -k -f $MAKEFILE all ) &
  fi
  
  debug "cast" "Starting stage four make."
  
  ( CAST_PASS="four" ; /usr/bin/make  -j1 -k -f $MAKEFILE all )
  rm $MAKEFILE

}

function pass_three()  {
  debug "cast" "pass_three - $*"
  SPELL=$1
  build_sources $*
}

function pass_four()  {

  debug "cast" "pass_four - $*"
  SPELL=$1
  trigger "pre_cast"
  if ! [[ $COMPILE ]] &&  can_resurect $SPELL ; then
    resurrect     $SPELL
  else
    cast_spell $*
  fi

  # We only want to trigger if the cast or resurect completed properly
  [ $? -eq 0 ] && trigger "cast"
  
}


# Report generation
function pass_five()  {

  debug "cast" "Function : pass_five"

  # must exist or we get problems with checks here.
  touch $SUCCESS_LIST
  touch $FAILED_LIST
  
  debug "pass_five" "SUCCESS LIST is : `cat $SUCCESS_LIST 2>/dev/null`"
  debug "pass_five" "FAILED LIST is : `cat $FAILED_LIST 2>/dev/null`"

  if [ -s $SUCCESS_LIST ] ; then

	  message "${MESSAGE_COLOR}Finished processing install requests."
	  message ""
	  message "Spells installed successfully:"
	  message "------------------------------${SPELL_COLOR}"

	  for item in `cat $SUCCESS_LIST 2>/dev/null`; do
    	message "$item"
	  done | column
   
    set_term_title "Casting successfull."
    message "${DEFAULT_COLOR}"

  fi 
  
  #
  # To check for failed spells, we only need to see what is remaining in the 
  # install queue.
  #
  if  [  -s  $FAILED_LIST   ] ; then
    
    message "${DEFAULT_COLOR}"
    message "${MESSAGE_COLOR}Spells that encountered problems:"
    message "---------------------------------${PROBLEM_COLOR}"
    
    # for item in $* ; do
    #  if ! ([ -e $SUCCESS_LIST ] && grep -q "^$item$" $SUCCESS_LIST) ; then
    #    message "$item"
	  #  fi

    for item in `cat $FAILED_LIST 2>/dev/null`; do
      message "$item"
    done | column

    set_term_title "Casting failed."
    message "${DEFAULT_COLOR}"
    return 1

  fi 
  
  debug "cast" "End of pass_five"

}

function pass_zero()  {

  debug "cast" "Starting pass_zero()"
  PASS_ZERO="y"  #<--- What is this here for? (Duff, 03/02/13)
  export  D_LOG="/tmp/sorcery.downloading.$$.$RANDOM"
  rm -f $D_LOG 2>/dev/null

  debug "pass_zero" "Starting passes 1,2,3,4 with : '$*'"
  debug "pass_zero" "   and with spells : '$SPELLS'"
  export  CAST_PASS="one";    pass_one $*  &&
  export  CAST_PASS="two";    pass_two $SPELLS
  #pass_three and _four are hidden inside the makefile
  debug "pass_zero" "Starting pass 5 with: '$@'"
  export  CAST_PASS="five";  pass_five "$@"

  rm  -f   $D_LOG*
  

}

function int_trap()
{
	message "${PROBLEM_COLOR}SIGINT${DEFAULT_COLOR}"
	message "Cleaning up as well as I can..."
	cleanup
	exit 1
}

function cleanup() {
  
  debug "cleanup" "Cleaning up the contents of `cat $RM_AT_END 2>/dev/null`"
  rm $(cat $RM_AT_END 2>/dev/null) $RM_AT_END 2>/dev/null

}

function main()	{
  debug "cast" "main() - $*"
  local T_SPELLS=""
  process_parameters        $*
  SPELLS=`strip_parameters  $*`

  if  [[  $FIX  ]];  then

    run_fix  $SPELLS

  else

	  for spell in $SPELLS ; do
		  codex_does_spell_exist $spell
		  if [ $? -eq 0 ] ; then
			  T_SPELLS="$T_SPELLS $spell"
		  fi
	  done
	  SPELLS=$T_SPELLS
	
	  if ! [[ $SPELLS ]]; then
		  return 1
	  fi
	
	  MAKEFILE="/tmp/Makefile.cast.$$"
	  SUCCESS_LIST="$0.success_list"
    FAILED_LIST="$0.failed_list"
	  export ENV_CACHE=${ENV_CACHE:-/tmp/cast.envCache.$$}
	  echo "$SUCCESS_LIST $FAILED_LIST $0 $ENV_CACHE" >> $RM_AT_END
	  export RM_AT_END="$RM_AT_END"
	  BASE_SPELLS=" $SPELLS "

    case  $CAST_PASS  in
       one)  pass_one    $SPELLS  ;; #Never matches
       two)  pass_two    $SPELLS  ;; #Never matches
     three)  pass_three  $SPELLS  ;; #d/l sources, Never matches
      four)  pass_four   $SPELLS  ;; #real casting, Never matches
      five)  pass_five   $SPELLS  ;; #cast report
         *)  pass_zero   $SPELLS  ;; #start everything
    esac

  fi

  echo
  true

}


. /etc/sorcery/config

if    [  $#      ==  0  ];  then  help  |  $PAGER
elif  [  "$UID"  !=  0  ];  then

  echo  "Enter the root password, please."
  su  - -c  "DISPLAY=$DISPLAY PATH=$PATH  $0  $*"

elif  [  "$(  dirname  $0  )"  !=  "/tmp"  ];  then

  if ! [[ $RM_AT_END ]] ; then
    #This stuff is here to make sure a user can't make the file
	  # and fill it up with stuff the feel the need to delete
    export RM_AT_END=${RM_AT_END:-"/tmp/cast.$$.tmplist"}
	  touch $RM_AT_END
	  chown root:root $RM_AT_END
	  echo -n '' > $RM_AT_END
  fi
  
  SAFE_CAST=/tmp/casting.$$
  lock_file $SAFE_CAST
  
  cp  $0  $SAFE_CAST
  chmod +x $SAFE_CAST
  echo "$SAFE_CAST" >> $RM_AT_END
  exec $SAFE_CAST "$@"
  
else

  renice +10 -p $$  >/dev/null
  trap int_trap INT
  main  $*
  if [ $SHLVL -eq 2 ] ; then
	unlock_file $SAFE_CAST
	cleanup
  fi

fi

debug "cast" "exiting..."

#---------------------------------------------------------------------
##=back
##
##=head1 LICENSE
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#---------------------------------------------------------------------

