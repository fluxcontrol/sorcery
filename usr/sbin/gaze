#!/bin/bash
#---------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
## gaze - view sorcery spell management information
## (gaze into the crystal ball)
##
##=head1 DESCRIPTION
##
## ...
##
##=head1 COPYRIGHT
##
## First version of gaze written & copyrighted 2001 by Brian Peterson
## 
## Current version contains none of Brian Peterson's code and is 
## Copyright 2001 by Kyle Sallee
##
## Other additions/corrections Copyright 2002 by the Source Mage Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#---------------------------------------------------------------------


help() {
cat << EOF

Invoke gaze with desired command followed by arguments.
Please note that anything in brackets [] is optional.

Command		Arguments	Description

-q		<empty>		disable human style output

alien		<empty>		Discover untracked files.
from		path/file	Discover what installed a file.
search		"phrase"	Searches for "phrase" in the long and 
				  short spell descriptions and in the spell 
				  name.
service		port|acronym	Displays spells that provide that service.
provides	feature 	Displays spells that provide the feature.

what		spell		Print the spell's description.
where		spell		Print the spell's section.
website | url	spell		Print the spell's website.
install		spell		View an install log.
installed	[spell]		View/query installed spells.
version		spell		View version of spell installed, and version in 
				the grimoire.
license		spell [spell]	View the license of the given spell(s)
license		section [section]	View the licenses of spells in the given
					section(s)
license		license [license]	View information about the given license(s).
compile		spell		View a compile log.
sources		spell		List the source files for a spell.
history		spell		Show history for a spell.

sum		[spell]		Prints checksums.
md5sum		[spell]		Prints md5sums.
export				Make snapshot of box's configuration.
import		snapshot	Restore snapshot.

section		[section]	List grimoire sections.
maintainer	[section]	See who is the maintainer for a section
grimoire			View a text listing of the grimoire.
html				View a html listing of the grimoire.

newer		20020521	Show available spells newer than May 21, 2002.
older		20010521	Show spells installed before May 21, 2001.

prune		<empty>		Removes all old sources from $SOURCE_CACHE
				  and removes all old backups from 
				  $INSTALL_CACHE.

voyeur		[delay or spell]  
				Peak into spell compilation.

pam		<empty>		Display installed or held spells that are
				  Linux-PAM aware.


orphans		<empty>		Display installed spells that have no
				  explicit dependencies on them.

depends		spell		Displays the spells that explicitly
				  or recursively depend on this spell.

spider		<empty>		Validates urls for entire grimoire.
spider   <item> [<item> ...]	Validates urls for one or more items.  Items
				  may be either spells or sections.

\$SPELL_SCRIPT	spell	will print the spell script for that spell.
EOF
}


export_snapshot()  {

  SOURCE_DIRECTORY=$BUILD_DIRECTORY/snapshot
  mk_source_dir          $SOURCE_DIRECTORY
  cp  -a  /etc           $SOURCE_DIRECTORY
  cp  -a  $CONFIG_CACHE  $SOURCE_DIRECTORY

  for  LINE  in  `cat  $SPELL_STATUS`;  do
    SPELL=`echo  $LINE  |  cut  -d  :  -f1`
     STATUS=`echo  $LINE  |  cut  -d  :  -f2`
    if  [  "$STATUS"  ==  "installed"  ];  then
      echo  $SPELL  >>  /usr/src/snapshot/install
    fi
  done

  SNAPSHOT="/root/snapshot-$HOSTNAME-`date  -u  +%Y%m%d`.tar.bz2"

  cd  $BUILD_DIRECTORY
  tar    -c  snapshot     |
  bzip2  -9  >  $SNAPSHOT
  rm_source_dir          $SOURCE_DIRECTORY
  echo  "$SNAPSHOT created."

}


import_snapshot()  {

          SNAPSHOT=$1
  SOURCE_DIRECTORY=$BUILD_DIRECTORY/snapshot

  if  [  -f  "$1"  ];  then

    cd  $BUILD_DIRECTORY
    mk_source_dir          $SOURCE_DIRECTORY

    bzcat $SNAPSHOT  |  tar  -x
    cd  $SOURCE_DIRECTORY

    for  LINE  in  `cat  install`;  do
      push_install_queue  $LINE
    done
    report  $INSTALL_QUEUE  "Install Queue"

    cp  -ai  local  /etc/sorcery
    cp  -ai  etc    /

    cd  /
    rm_source_dir  $SOURCE_DIRECTORY

  else

    message  "Unable to find snapshot  \"$SNAPSHOT\""
    false

  fi

}


checksum()      { for FILE in `cat $1 | files`; do sum -s  $FILE; done; }
md5sum_files()  { for FILE in `cat $1 | files`; do md5sum  $FILE; done; }


alien()  {

  message  "In a few minutes I will print files found on this disk"
  message  "that were not installed by sorcery.  This is not a"
  message  "security feature!  Files could still be lurking"
  message  "undetected on this box."

  rm    -f  /tmp/gaze.found
  rm    -f  /tmp/gaze.known

  message  "Discovering ambient files..."
  find  $TRACKED  |  files  |  filter  "$EXCLUDED"  |  sort  >/tmp/gaze.found
 
  message  "Discovering installed files..."
  cat  $INSTALL_LOGS/*  |  files  |  sort  >  /tmp/gaze.known

  diff  -B  -a  -d  /tmp/gaze.found  /tmp/gaze.known  |
  grep  -v  "^> "                                     |
  grep      "^< "                                     |
  cut  -c  3-                                         |
  filter  "$PROTECTED"

  rm  -f  /tmp/gaze.found
  rm  -f  /tmp/gaze.known

}


gaze_catalog()  {

  echo  "Sorcery Grimoire for `date  -u`"

  ((  COUNT=0  ))

  for  SECTION  in  `codex_get_all_sections`;  do
    echo 
    echo  "-------------------------------------------------"
    echo  "SECTION:  $(  basename  $SECTION  )"  
    echo  "-------------------------------------------------"
    for  spell  in  `codex_get_spells $SECTION`;  do
      codex_set_current_spell  $spell
      echo  $SPELL
      ((  COUNT++  ))
    done
  done

  echo
  echo  "Total spells:  $COUNT"

}


gaze_catalog_html()  {

  echo  "<html><head><title>Sorcery Grimoires for `date  -u`</title></head>"
  echo  "<body background=\"media/blackmarble.jpg\">"

  echo  "<table  align=\"center\""
  echo  "        background=\"media/whitemarble.jpg\""
  echo  "        border=5>"

  echo  "<tr><th colspan=4><font color=green  size=+1>"
  echo  "Sorcery Grimoires<br>`date  -u`"
  echo  "</font></th></tr>"

  echo  "<tr>"
  echo  "<th>Spell</th>"
  echo  "<th>Version</th>"
  echo  "<th>Updated</th>"
  echo  "<th>Website</th>"
  echo  "</tr>"

  ((  COUNT=0  ))

  for  SECTION  in  `codex_get_all_sections`;  do
    echo  "<tr><th colspan=4><font color="green">$( basename  $SECTION )</font></th></tr>"
    for  SPELL  in  `codex_get_spells  $SECTION`;  do
      (
        codex_set_current_spell  $SPELL

        echo  "<tr>"
        if  [  "$SPELL"  ==  "linux"  ]   ||
            [  "$SPELL"  ==  "glibc"  ];  then
            BOLD="<b>"
          UNBOLD="</b>"
        else
          unset    BOLD
          unset  UNBOLD
        fi
        if  [  ${#SPELL}  -gt  15  ];  then
          SPELL="<font size=-1>$SPELL</font>"
        fi
	if  [  -z  "$UPDATED"  ]  &&  [  "$ENTERED"  ];  then
	    UPDATED=$ENTERED
	fi
        echo  "<td>$BOLD $SPELL $UNBOLD</td>"
        echo  "<td><font size=-1>$BOLD $VERSION $UNBOLD</font></td>"
        echo  "<td><font size=-1>$UPDATED</font></td>"

        WEBSITE=$WEB_SITE
        if    [  ${#WEB_SITE}  -lt 20  ];  then
            SHRINK="<font size=-1>"
          UNSHRINK="</font>"
        elif  [  ${#WEB_SITE}  -lt 30  ];  then
            SHRINK="<font size=-2>"
          UNSHRINK="</font>"
        else
           WEBSITE="`echo  $WEB_SITE  |  cut  -c-30`..."
            SHRINK="<font size=-3>"
          UNSHRINK="</font>"
        fi

        if  [  "$WEB_SITE"  !=  "unknown"  ];  then
          echo  "<td> $SHRINK"
          echo  "<a href=\"$WEB_SITE\" target=\"_blank\">$WEBSITE</a>"
          echo  "$UNSHRINK </td>"
        else
          echo  "<td></td>"
        fi
        echo  "</tr>"
      )
      ((  COUNT++  ))
    done
  done


  echo  "<tr><th colspan=4>Total spells:  $COUNT</th></tr>"
  echo  "</table></body></html>"
}


display()  {

  if  [  -f  "$1"  ];  then
    case  `file  -b  $1  |  cut -d ' ' -f1`  in
      ASCII)    cat  $1  |  $PAGER  ;;
      bzip2)  bzcat  $1  |  $PAGER  ;;
    esac
  else
    message  "$2"
    false
  fi

}


newer()  {

  DATE=$1
  if  [  -n  "$DATE"  ];  then
    for  SPELL  in  `codex_get_all_spells`;  do
      codex_set_current_spell  $SPELL
      if  [  "$ENTERED"  ]  &&  [  $ENTERED  -gt  $DATE  ];  then
        echo  $SPELL
      fi
    done
  else
    help  |  $PAGER
  fi

}


older()  {

  DATE=$1

  if  [  -n  "$DATE"  ];  then
    for  LINE  in `cat  $SPELL_STATUS`;  do
      CAST_DATE=`echo  $LINE  |  cut  -d  :  -f2`
      if  [  $CAST_DATE  -gt  $DATE  ]  2>/dev/null;  then
        true
      else
        echo  $LINE  |  cut  -d  :  -f1
      fi
    done
  else
    help  |  $PAGER
  fi

}


#---------------------------------------------------------------------
##=item gaze_spider_check <spell> <url> [<url> ...]
##
## Verifies urls for a particular spell.
##
#---------------------------------------------------------------------
gaze_spider_check()  { (

  SPELL=$1
  shift  1
  for  URL  in  $*;  do
    GAZE_SPIDER_FAILURE_LOG=`url_verify  $URL`  ||
    ( 
      echo  "=================================="  >>  /tmp/spider.broke
      echo  $(basename $SECTION)  $SPELL  $URL    >>  /tmp/spider.broke
      echo  "----------------------------------"  >>  /tmp/spider.broke
      echo  $GAZE_SPIDER_FAILURE_LOG              >>  /tmp/spider.broke
      echo  "  "                                  >>  /tmp/spider.broke
      echo  "- failed: $URL"
    )
  done

) }


#---------------------------------------------------------------------
##=item gaze_get_spell_urls <spell>
##
## Echos all urls associated with a spell
##
#---------------------------------------------------------------------
gaze_get_spell_urls() {
  for i in ${!SOURCE*} ; do
    echo "$i" | egrep -q "^SOURCE([[:digit:]]*)?_URL$" || continue
    eval 'URL_LIST=${'$i'[*]}'
    [  -n  "$URL_LIST"  ]  &&  echo  "$URL_LIST"
  done
}


#---------------------------------------------------------------------
##=item gaze_spider_spells <spell> [<spell> ...]
##
## Verfies that all given spell urls are valid.
##
#---------------------------------------------------------------------
gaze_spider_spells()  {
  if  [  -n  "$1"  ]; then
    message "====================================================="
    message "Checking Urls for Spells"
    message "====================================================="
    for  SPELL_DIRECTORY  in  $@;  do
    (
       codex_set_current_spell  $SPELL_DIRECTORY
       local    URL_LIST=`gaze_get_spell_urls  $SPELL`
       local    URL_COUNT=`echo $URL_LIST | wc -w | sed -e 's/ //g;'`
       message  "Checking $URL_COUNT URLs for $SPELL"
       gaze_spider_check  $SPELL  $URL_LIST
    )
    done
    message "  "
  fi
}


#---------------------------------------------------------------------
##=item gaze_spider_sections <section> [<section> ...]
##
## Verfies that all spell urls in the given sections are valid.
##
#---------------------------------------------------------------------
gaze_spider_sections()  {
  for  SECTION  in  $SECTIONS;  do
    message "====================================================="
    message "Checking Urls in Section: $( basename $SECTION )"
    message "====================================================="
    local SPELLS=`codex_get_spells $SECTION`
    for  SPELL  in  $SPELLS;  do
    (
       codex_set_current_spell $SPELL
       message            "Checking URLs for $SPELL"
       local              URL_LIST=`gaze_get_spell_urls  $SPELL`
       gaze_spider_check  $SPELL  $URL_LIST
    )
    done
    message " "
  done
}


#---------------------------------------------------------------------
##=item gaze_spider [<spell or section> ...]
##
## Verfies that spell urls are valid.  If no sections or spells are 
## given, all spells are verified
##
#---------------------------------------------------------------------
gaze_spider()  {

  rm  -rf  /tmp/spider.broke
  rm  -rf  /tmp/spider
  mkdir    /tmp/spider
  cd       /tmp/spider

  message  "Writing broken URLs to /tmp/spider.broke"
  message  "This test might take a while to complete"
  message  "and consume significant resources."

  unset  SECTIONS  SPELLS  UNKNOWN

  [  -z  "$1"  ]  &&  SECTIONS=`codex_get_all_sections`

  for  spell_or_section  in  $@;  do

    if  codex_find_spell_or_section_by_name  $spell_or_section;  then
      [  -n  "$CODEX_FOUND_SECTION"  ]  &&  SECTIONS="$SECTIONS $CODEX_FOUND_SECTION"
      [  -n  "$CODEX_FOUND_SPELL"  ]    &&  SPELLS="$SPELLS $CODEX_FOUND_SPELL"
    else
      UNKNOWN="$spell_or_section $UNKNOWN"
    fi 

  done

  gaze_spider_spells   $SPELLS
  gaze_spider_sections $SECTIONS

  [  -n  "$UNKNOWN"  ]                  &&
  message "Unknown Spells or Sections"  &&
  message "--------------------------"  &&
  message "$UNKNOWN"

  cd  /

}


show_from()  {

  cd  $INSTALL_LOGS
  grep  "`esc_str $1`$"  *

}


show_spell_component()  {

  local        COMPONENT=$1
  local       SPELL_NAME=$2
  local  SPELL_DIRECTORY=`codex_find_spell_by_name  $SPELL_NAME`
  if  [  -x  $SPELL_DIRECTORY/$COMPONENT  ];  then
    cat      $SPELL_DIRECTORY/$COMPONENT
  fi

}


long_search()  {

meta_char="\b"
remove_search="$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char$meta_char"

if ! [ "$GAZE_VERBOSE" == "0" ]; then
	echo -n "Searching...   "
fi

let j=0	
  for  SPELL_DIRECTORY  in  `codex_get_all_spells`;  do

   if ! [ "$GAZE_VERBOSE" == "0" ]; then
    progress_spinner
   fi
    codex_set_current_spell $SPELL_DIRECTORY

    for item in $*; do 
    
    if  echo  $SPELL  |  grep  -q  -i  "$item"; then
	SEARCH_RESULTS[$j]="$item -> $SPELL (Name Match)"
    elif codex_get_spell_keywords $SPELL_DIRECTORY  |  grep  -q  -i  "$item"; then
        SEARCH_RESULTS[$j]="$item -> $SPELL (Keyword Match)"
    elif echo  $SHORT  |  grep  -q  -i  "$item"; then
        SEARCH_RESULTS[$j]="$item -> $SPELL (Short Description)"
    elif codex_get_spell_description $SPELL_DIRECTORY |  grep  -q  -i  "$item"; then
        SEARCH_RESULTS[$j]="$item -> $SPELL (Description)"
    fi
   
    if [ -n "${SEARCH_RESULTS[$j]}" ]; then 
	if ! [ "$GAZE_VERBOSE" == "0" ]; then
		echo -e "$remove_search${SEARCH_RESULTS[$j]}"
		echo -n "Searching...   "
	else
		echo $SPELL
	fi
     let j++
    fi
    
    done  
  
  done

if ! [ "$GAZE_VERBOSE" == "0" ]; then
	echo -ne "$remove_search"
fi

#This dumps the array at the end of the search
#redundant at the moment. Left for future use -rha
#  let dump_count=0
#  while [ $dump_count -lt $j ]; do
#   echo "${SEARCH_RESULTS[$dump_count]}"
#   let dump_count++
#  done
  
}


service()  {
	
  for  SPELL  in  `codex_get_all_spells`;  do
    if    [  -f  $SPELL/services  ]  &&
	  grep  -q  -i  "$1"  $SPELL/services
    then  echo  "$( basename  $SPELL )"
    fi
  done
  
}


#---------------------------------------------------------------------
##=item gaze_provides <feature>
##
## Given a feature, shows a list of spells that provide the feature
## or functionality.  For example:
##
##    % gaze provides alsa-drivers
##    alsa-driver
##    linux-devel
##    linux-dj
##
## This output indicates that alsa-driver, linux-devel, and linux-dj
## all provide the alsa-drivers feature.
##
#---------------------------------------------------------------------
gaze_provides()  {
	
  for  SPELL  in  `codex_get_all_spells`;  do
    if    [  -f  $SPELL/provides  ]  &&
	  grep  -q  -i  "$1"  $SPELL/provides
    then  echo  "$( basename  $SPELL )"
    fi
  done
  
}


find_casting()  {

  for  FILE in `ls  /var/lock/casting*  2>/dev/null`;  do
    if  ps  `cat  $FILE  2>/dev/null`  |  grep  -q  cast;  then
      echo  $FILE  |  sed  "s:/var/lock/casting.::"
      return  0
    fi
  done
  false

}


peak_casting()  {

  if  [  -f     /var/lock/casting.$1   ]            &&
      ps  `cat  /var/lock/casting.$1  2>/dev/null`  |
      grep  -q  cast                                &&
      [  -f  /tmp/$1.compile.log  ]
  then
    nice  -n  +20                  \
    tail  -f  /tmp/$1.compile.log  \
          --follow=name            \
          --pid=`cat /var/lock/casting.$1`  2>/dev/null
  fi

}


activate_voyeur()  {

  if  [  -n  "$1"  ]  &&
      !  find_section  $1  >  /dev/null
  then  ((  DEFAULT_DELAY  =  $1  *  60  ))
        shift  1
  fi

  for  SPELL  in  $@;  do
    peak_casting  $SPELL
  done

  DEFAULT_DELAY=${DEFAULT_DELAY:=60}

  while  true;  do

    if    !  ACTIVE_SPELL=`find_casting`;  then
      message  "${MESSAGE_COLOR}Waiting"       \
               "${DEFAULT_DELAY}"              \
               "seconds for a cast to begin."  \
               "${DEFAULT_COLOR}"

      for  ((  DELAY=DEFAULT_DELAY  ;  DELAY > 0  ;  DELAY--  )); do
        if  ACTIVE_SPELL=`find_casting`;  then
          break
        else
          sleep 1
        fi
      done
    fi

    if    [  -z  "$ACTIVE_SPELL"  ];  
    then  break
    else  peak_casting  $ACTIVE_SPELL
    fi

  done

}


show_orphans()  {

  for  SPELL  in  `cat  $SPELL_STATUS  |  cut  -d :  -f1`;  do
    if    !  cut  -d :  -f2-  $DEPENDS_STATUS  |
             grep             "^`esc_str $SPELL`:"       |
             grep  -q         ":on:"
    then     echo   $SPELL
    fi
  done

}




#---------------------------------------------------------------------
##=item gaze_show_website <spell>
##
## Shows the website/home page for the given spell.
##
#---------------------------------------------------------------------
gaze_show_website()  {

  if  codex_set_current_spell_by_name  $1;  then
    if  [  -n  "$WEB_SITE"  ];  then   
      echo  $WEB_SITE
    else
      echo  "  "
      echo  "No website found for '$1'.  If you know of a website for"
      echo  "'$1',  please let the Source Mage developers know so that"
      echo  "it can be included in future versions of the Source Mage"
      echo  "grimoire.  You can report the omission at the Source Mage"
      echo  "bug tracking website:"
      echo  "  "
      echo  "           http://bugs.sourcemage.org/"
    fi
  else  
    echo  "  "
    echo  "'$1' is not a spell in the current grimoire(s).  If it's"
    echo  "not a typo and it's a spell you'd really like to see, consider"
    echo  "creating a spell for it yourself.  For instructions on how to"
    echo  "write & submit spells, see the Source Mage Wiki:"
    echo  "  "
    echo  "             http://wiki.sourcemage.org."
  fi

}

show_maintainer()  {

  SECTION=`codex_find_section_by_name $1`
  
  if  [  -d  "$SECTION"  ];  then

    if  [  -f  "$SECTION/MAINTAINER"  ];  then
      cat $SECTION/MAINTAINER
    else
      echo "No maintainer available for section '$( basename  $SECTION )'"
    fi

  else

    echo  "No such section '$1'"

  fi

}


show_history()  {

  local SPELL=`codex_find_spell_by_name  $1`

  if  [  -n  "$SPELL"  ];  then

    if  [  -f  "$SPELL/HISTORY"  ]; then
      cat  $SPELL/HISTORY
    else
      echo "No history available for spell '$( basename  $SPELL )'"
    fi

  else

    echo "No such spell '$1'"

  fi
}


#---------------------------------------------------------------------
##=item gaze_show_section [<section> [<section>...]]
##
## Given a section name, shows a table of spells in that section along
## with their grimoire version and installed verion
##
#---------------------------------------------------------------------
gaze_show_section()  {

  local  SECTION_NAMES=$@

  if  [  -n  "$SECTION_NAMES"  ]; then

    (
      for  SECTION_NAME  in  $SECTION_NAMES;  do

        local SECTION=`codex_find_section_by_name  $SECTION_NAME`  &&
        codex_get_spell_names $SECTION 

      done
    ) | column

  else

    codex_get_all_section_names | column

  fi

}


#---------------------------------------------------------------------
##=item gaze_show_section_version_table <section>
##
## Given a section name, shows a table of spells in that section along
## with their grimoire version and installed verion
##
#---------------------------------------------------------------------
gaze_show_section_version_table()  {

   local  SPELLS=`codex_get_spells $1`

   (

     echo  "Section|Spell|Grimoire Version|Installed Version"
     echo  "-------|-----|----------------|-----------------"

     for  spell  in  $SPELLS;  do 

       codex_set_current_spell  $spell                            &&
       local  INSTALLED=`installed_version  $SPELL`               && 
       echo  "$SECTION|$SPELL|${VERSION:="-"}|${INSTALLED:="-"}"

     done 

   ) | column -t -s "|"

}


#---------------------------------------------------------------------
##=item gaze_show_spell_version_table <spell> [<spell> ...]
##
## Shows the versions of spells, both the version in the grimoire and
## the version installed on the system.  
##
#---------------------------------------------------------------------
gaze_show_spell_version_table()  {

  (
    echo  "Section|Spell|Grimoire Version|Installed Version"
    echo  "-------|-----|----------------|-----------------"
 
   for  SPELL  in  $@; do 

      codex_set_current_spell  $SPELL                        &&
      local  INSTALLED=`installed_version  $SPELL`           &&
      echo  "$SECTION|$SPELL|${VERSION:="-"}|${INSTALLED:="-"}"

    done 

  ) | column -t -s "|"

}


#---------------------------------------------------------------------
##=item gaze_show_version <spell or section> [<spell or section> ...]
##
## Shows the versions of spells, both the version in the grimoire and
## the version installed on the system.  
##
#---------------------------------------------------------------------
gaze_show_version()  {
    
  local SPELLS_AND_SECTIONS=$@
  local SPELLS=
  local UNKNOWN=

  for  spell_or_section  in  $SPELLS_AND_SECTIONS;  do

    if  codex_find_spell_or_section_by_name  $spell_or_section;  then

      [  -n  "$CODEX_FOUND_SECTION"  ]                                      &&
      gaze_show_section_version_table  $CODEX_FOUND_SECTION  2>  /dev/null  &&
      echo " "

      [  -n  "$CODEX_FOUND_SPELL"  ]    &&
      SPELLS="$SPELLS $CODEX_FOUND_SPELL"

    else
      UNKNOWN="$spell_or_section $UNKNOWN"
    fi 

  done

  [  -n  "$SPELLS"  ]  &&
  gaze_show_spell_version_table  $SPELLS  2>  /dev/null  &&
  echo " "


  [  -n  "$UNKNOWN"  ]                  &&
  message "Unknown Spells or Sections"  &&
  message "--------------------------"  &&
  message "$UNKNOWN"

}


#---------------------------------------------------------------------
##=item gaze_show_section_license_table <section>
##
## Given a section name, shows a table of spells in that section along
## with their licenses.
##
#---------------------------------------------------------------------
gaze_show_section_license_table()  {

   local  SPELLS=`codex_get_spells $1`

   (

     echo  "Section|Spell|License(s)"
     echo  "-------|-----|----------"

     for  spell  in  $SPELLS;  do 

       codex_set_current_spell  $spell        &&
       echo  "$SECTION|$SPELL|${LICENSE[@]}"

     done 

   ) | column -t -s "|"

}


#---------------------------------------------------------------------
##=item gaze_show_spell_license_table <spell> [<spell> ...]
##
## Shows the licenses of spells
##
#---------------------------------------------------------------------
gaze_show_spell_license_table()  {

  (
    echo  "Spell|License(s)"
    echo  "-----|----------"
 
    for  SPELL  in  $@; do 

      codex_set_current_spell  $SPELL                        &&
      echo "$SPELL|${LICENSE[@]}"

    done 

  ) | column -t -s "|"

}


#---------------------------------------------------------------------
##=item gaze_show_license_table <license> [<license> ...]
##
## Shows the information about the given licenses. 
##
#---------------------------------------------------------------------
gaze_show_license_table()  {

  
  (
    echo  "Abbr|License Full Name|URL"
    echo  "----|-----------------|---"

    for  LICENSE  in  $@; do 

      grep "^$LICENSE|"  ${SM_LICENSE_LIST}  2> /dev/null

    done 

  ) | column -t -s "|"

}



#---------------------------------------------------------------------
##=item gaze_show_license <spell, section, or license> [<spell, section, or license> ...]
##
## Shows the licenses of spells if a spell or section name is given.
## Shows info a license if a license name is given.
##
#---------------------------------------------------------------------
gaze_show_license()  {
    
  local SPELLS_AND_SECTIONS_AND_LICENSES=$@
  local SPELLS=
  local LICENSES=
  local UNKNOWN=

  for  spell_section_or_license  in  $SPELLS_AND_SECTIONS_AND_LICENSES;  do

    if  codex_find_spell_or_section_by_name  $spell_section_or_license;  then

      [  -n  "$CODEX_FOUND_SECTION"  ]                                      &&
      gaze_show_section_license_table  $CODEX_FOUND_SECTION  2>  /dev/null  &&
      echo " "

      [  -n  "$CODEX_FOUND_SPELL"  ]    &&
      SPELLS="$SPELLS $CODEX_FOUND_SPELL"

    elif  grep -q "^`esc_str $spell_section_or_license`|"  ${SM_LICENSE_LIST} 2> /dev/null;  then
      LICENSES="$LICENSES $spell_section_or_license"
    else
      UNKNOWN="$spell_section_or_license $UNKNOWN"
    fi 

  done

  [  -n  "$SPELLS"  ]                                    &&
  gaze_show_spell_license_table  $SPELLS  2>  /dev/null  &&
  echo " "

  [  -n  "$LICENSES"  ]                              &&
  gaze_show_license_table  $LICENSES  2>  /dev/null  &&
  echo " "


  [  -n  "$UNKNOWN"  ]                              &&
  message "Unknown Spells or Sections or Licenses"  &&
  message "--------------------------------------"  &&
  message "$UNKNOWN"

}


parse()  {

  SPELL=$2
  SECTION=$2
  VERSION=`installed_version  $SPELL`

  case  $1  in

            html)  gaze_catalog_html                     ;;
          export)  export_snapshot                       ;;
          import)  import_snapshot   $2                  ;;
         section)  shift; gaze_show_section $@           ;;
         version)  shift; gaze_show_version $@           ;;
         license)  shift; gaze_show_license $@           ;;
           alien)  alien                                 ;;
            from)  show_from         $2                  ;;
           newer)  newer             $2                  ;;
           older)  older             $2                  ;;
           prune)  prune                                 ;;
         sources)  sources           $SPELL              ;;
          spider)  shift; gaze_spider  $@                ;;
        grimoire)  gaze_catalog  |   $PAGER              ;;
         DETAILS)  show_spell_component $1 $2            ;;
         DEPENDS)  show_spell_component $1 $2            ;;
       CONFIGURE)  show_spell_component $1 $2            ;;
       CONFLICTS)  show_spell_component $1 $2            ;;
       PRE_BUILD)  show_spell_component $1 $2            ;;
           BUILD)  show_spell_component $1 $2            ;;
           PATCH)  show_spell_component $1 $2            ;;
      POST_BUILD)  show_spell_component $1 $2            ;;
    POST_INSTALL)  show_spell_component $1 $2            ;;
      PRE_REMOVE)  show_spell_component $1 $2            ;;
     POST_REMOVE)  show_spell_component $1 $2            ;;
         PREPARE)  show_spell_component $1 $2            ;;
         HISTORY)  show_spell_component $1 $2            ;;
          search)  shift; long_search $@                 ;;
         service)  service       "$2"                    ;;
        provides)  gaze_provides "$2"                    ;;
         depends)  show_depends  "$2"  |  sort  |  uniq  ;;
         orphans)  show_orphans        |  sort  |  uniq  ;;
     website|url)  gaze_show_website  "$2"               ;;
      maintainer)  show_maintainer  "$2"                 ;;
         history)  show_history  "$2"                    ;;


    compile)  if  [  -z  "$VERSION"  ];  then
                  codex_set_current_spell_by_name  $2  
              fi
              display  $COMPILE_LOGS/$SPELL-$VERSION.bz2   \
                       "Compile log for $SPELL does not exist"
              ;;

    install)  display  $INSTALL_LOGS/$SPELL-$VERSION   \
              "Install log for $SPELL does not exist"
              ;;

    installed)  if    [  -z  "$SPELL"    ]
                then  $PAGER   $SPELL_STATUS
                elif  [  -n  "$VERSION"  ]
                then  echo   "$VERSION"
                else  message  "$SPELL is not installed";  false
                fi
                ;;


    sum)  [  -n  "$SPELL"  ]                         &&
          checksum  "$INSTALL_LOGS/$SPELL-$VERSION"  ||
          checksum  "$INSTALL_LOGS/*"
          ;;


    md5sum)  [  -n  "$SPELL"  ]                             &&
             md5sum_files  "$INSTALL_LOGS/$SPELL-$VERSION"  ||
             md5sum_files  "$INSTALL_LOGS/*"
             ;;


    what)  (
              codex_set_current_spell_by_name  $2           &&  
              codex_get_spell_description  $SPELL_DIRECTORY
           )                                       || 
           message  "Details for $2 not found"
           ;;

    where)  SECTION=`codex_get_spell_section_name  $2`  &&
            echo     "$SECTION"             ||
            message  "$2 not found"
            ;;

   voyeur)  shift  1;  activate_voyeur  $@  ;;

      pam)  find_pam_aware  ;;

        *)  help  ;;

  esac

}


. /etc/sorcery/config
if  [  $#  == 0  ];  then  help  |  $PAGER;  else  parse  $@;  fi


#---------------------------------------------------------------------
##=back
##
##=head1 LICENSE
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#---------------------------------------------------------------------
