#!/bin/bash
#---------------------------------------------------------------------
##
## Set of functions for working with an associative array type data
## structure.  Values can be stored and retrieved using strings as
## the index into the data structure instead of numbers.
##
## The hash data structure provided in this file allows you to store
## values into fields of a table.  The 'hash_put' function takes the
## name of the table, a field name in the table, and the value to be
## stored in the table.  The 'hash_get' function retrieves a value from
## the table given the table and field name.  
##
## <pre>
## To store a value into a field of a table, use hash_put:
##
##    hash_put "myTable" "aField" "theValue"
##
## The value stored in the table can be retrieved with hash_get:
##
##    hash_get "myTable" "aField"
##
## In this example, the hash_get function would echo "theValue".
## </pre>
## <br>
## <p>IMPLEMENTATION NOTE</p>
## <br>
## Bash does not provide direct support for hash tables.  These 
## functions are implemented by first building a variable using the
## table name and field name, then using the eval function to store
## (retrieve) value into (from) the variable.
##
## The idea for the hash data structure in bash was inspired by a 
## short example by Phil Howard which shows the use of hashes in bash.
## Phil Howard's original example can be found here:
##
##    http://www.codebits.com/bit.cfm?BitID=92
##
## @Copyright Copyright 2002 by the Source Mage Team
##
##
#---------------------------------------------------------------------


#---------------------------------------------------------------------
## @param table name
## @param field name
## @Type Private
## Given a table and field name, bulds the name of
## the variable into which a value will be stored.  Also changes '+',
## '-', and '.' in the table name into text since bash doesn't like
## variable names with those characters.
##
#---------------------------------------------------------------------
function hash_build_variable_name() {
  local TABLE="$1"
  local FIELD="$2"

#  debug "libhash" "hash_build_variable_name() - TABLE=$TABLE:FIELD=$FIELD"

  TABLE=${TABLE//\+/_P_}
  TABLE=${TABLE//\-/_M_}
  TABLE=${TABLE//\./_D_}
  TABLE=${TABLE//[/_OSB_}
  TABLE=${TABLE//]/_CSB_}  
  
  if [[ $FIELD ]] ; then
    FIELD=${FIELD//\+/_P_}
    FIELD=${FIELD//\-/_M_}
    FIELD=${FIELD//\./_D_}
    FIELD=${FIELD//]/_CSB_}
    FIELD=${FIELD//]/_OSB_}
  fi

  # If this format is changed, modify hash_get_table_fields to suite
  if [[ $FIELD ]] ; then echo "HASH_${TABLE}_${FIELD}_"
  else echo "HASH_${TABLE}_" ; fi
}


#---------------------------------------------------------------------
## @param field name
## @param table name
## @Type Private
## most likely reverses hash_build_field_name
##
#---------------------------------------------------------------------
function hash_unbuild_field_name() {
  local TABLE="$2"
  local FIELD=`echo "$1" | sed -n "s/^$2\(.*\)_$/\1/p"`

#  debug "libhash" "hash_unbuild_field_name() - TABLE=$TABLE:FIELD=$FIELD"

  FIELD=${FIELD//_P_/\+}
  FIELD=${FIELD//_M_/\-}
  FIELD=${FIELD//_D_/\.}
  FIELD=${FIELD//_CSB_/]}
  FIELD=${FIELD//_OSB_/[}

  echo $FIELD
}
#---------------------------------------------------------------------
## @param table name
## @param field name
## @param value
## 
## Saves the value in the specified table/field.
##
#---------------------------------------------------------------------
function hash_put() {
  local VARIABLE_NAME=`hash_build_variable_name "$1" "$2"`
  eval "${VARIABLE_NAME}=\"${3}\""
  debug "libhash" "hash_put() - VARIABLE_NAME=$VARIABLE_NAME, data=$3"
}


#---------------------------------------------------------------------
## @param table name
## @param field name
## 
## @Stdout Value stored in table/field
## Echos the value stored in the table/field.  If no value was 
## previously stored in the table/field, this function echos an empty 
## string.
##
#---------------------------------------------------------------------
function hash_get() {
  local VARIABLE_NAME=`hash_build_variable_name "$1" "$2"`
  echo ${!VARIABLE_NAME}
}


#---------------------------------------------------------------------
## @param table name
## @param field name
## 
## Unsets field. Deletes value.
##
#---------------------------------------------------------------------
function hash_unset() {
  local VARIABLE_NAME=`hash_build_variable_name "$1" "$2"`
  eval unset ${VARIABLE_NAME}
}


#---------------------------------------------------------------------
## @param table name
## 
## Unsets all fields in a table.
##
#---------------------------------------------------------------------
function hash_reset()  {

  local TABLE_NAME=`hash_build_variable_name "$1"`
  local VARIABLES=`eval 'echo ${!'${TABLENAME}'*}'`
  unset $VARIABLES   

}

#---------------------------------------------------------------------
## @param table name
## @param opt delimiter
## @Stdout table data
## Outputs the entire table data, with fields separated by the  
## optional delimiter. If no delimiter is give, \n will be used.
##
#---------------------------------------------------------------------
function hash_get_table()  {

  local TABLE_NAME=`hash_build_variable_name "$1"`
  local VARIABLES i
  local separator="$2"
  separator=${separator:-$'\n'}
  VARIABLES=`eval 'echo ${!'${TABLE_NAME}'*}'`
  
  for i in $VARIABLES; do
  	echo -n "${!i}${separator}"
  done
  
}


#---------------------------------------------------------------------
## @param table name
## @param opt delimiter
## @Stdout Fields in table
## Outputs all of the fields in the table , with fields separated    
## by the optional delimiter. If no delimiter is give, \n wil be 
## used.
##
#---------------------------------------------------------------------
function hash_get_table_fields()  {

  local TABLE_NAME=`hash_build_variable_name "$1"`
  local VARIABLES i
  local separator="$2"
  separator=${separator:-$'\n'}
  VARIABLES=`eval 'echo ${!'${TABLE_NAME}'*}'`
  
  for i in $VARIABLES ; do
    echo $(hash_unbuild_field_name $i $TABLE_NAME)${separator}
  done
  
}


#---------------------------------------------------------------------
## @License
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#---------------------------------------------------------------------
