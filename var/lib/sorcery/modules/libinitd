#!/bin/bash
#---------------------------------------------------------------------
# vim:set ts=2 sw=2 et:
#---------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
## Functions for automatic init-script installation.
##
##=head1 DESCRIPTION
##
## Installation steps performed by this script:
##
## pre install:
##  * Determine if the script is a facility provider, if it is then
##    ask the user whether it should be the default provider.
##
## install:
##  * Determine which runlevel the script should be placed in.
##  * Make a backup if there already is a different version of the script in
##    the target location.
##  * Install the script with permissions 754.
##  * Determine if the script sources any config file from /etc/sysconfig.
##  * For each config file:
##    * Install the config file if there is no existing copy installed.
##    * Otherwise merge new options into existing copy.
##
## post install:
##  * When the spell has been installed successfully then change the
##    /etc/sysconfig/facilities-file if the user wanted the script to be a
##    default provider.
##
##=head1 COPYRIGHT
##
## Copyright (C) 2003 The Source Mage Team <http://www.sourcemage.org>
##
##=head1 CONTRIBUTORS
##
## Robert Helgesson <rycee@home.se>
##
##=head1 FUNCTIONS
#---------------------------------------------------------------------


#---------------------------------------------------------------------
#=item _init_make_backup <new file> <old file>
##
## Makes a backup of "old file" if it differs from "new file"
##
#---------------------------------------------------------------------
_init_make_backup()
{

  # Don't bother if the old file doesn't exist
  [ -f $2 ] || return

  # Do the files differ? Return if they don't.
  cmp -s $2 $1 && return

  local savetime=$( date +'%Y%m%d%H%M' )
  bck_file=$2.$savetime.backup

  message "Making a backup of $2 due to differing content..."
  mv $2 $bck_file
  chmod 644 $bck_file

}


#---------------------------------------------------------------------
#=item _init_get_conf_files <init script>
##
## Extracts the files in /etc/sysconfig which are sourced by the script and
## prints them to stdout separated by newlines.
##
#---------------------------------------------------------------------
_init_get_conf_files()
{

  sed -n -f - $1 <<EOF
s!^\.[[:space:]]/etc/sysconfig/\([^[:space:]]*\).*!\1!p
s!^source[[:space:]]/etc/sysconfig/\([^[:space:]]*\).*!\1!p
EOF

}


#---------------------------------------------------------------------
#=item _init_merge_config_file <new config file> <old config file>
##
## Inserts new options from the new file into the old, existing, file
##
#---------------------------------------------------------------------
_init_merge_config_file()
{

  # Get newly added options
  local new_opts=$( sed -n -e 's/[[:space:]]*\([[:upper:]]*\)=.*/\1/p' $1 $2 |
                          sort | uniq -u )

  if [ -z "$new_opts" ] ; then
    message "  No new options to merge into $2..."
    return 0
  fi

  local savetime=$( date +'%Y%m%d%H%M' )
  cp $2 $2.$savetime.backup

  for opt in $new_opts ; do
    message "  Merging option $opt into $2..."
    sed -n -f - $1 <<EOF >> $2
# If we encounter an empty line then clear hold space since another
# variable is coming up...
/^$/ { x ; d ; h ; }

# The variable we're looking for has come, add it to the hold space and
# then print everything, quit when done...
/^[[:space:]]*$opt=/ { H ; x ; p; q; }

# Default action, append line to hold space
H
EOF
  done

}


#---------------------------------------------------------------------
#=item _init_install_conf_files <configuration file...>
##
## Installs or merges a list of init-script configuration-files.
##
#---------------------------------------------------------------------
_init_install_conf_files()
{

  for file in "$@" ; do
    local target_file=/etc/sysconfig/$file
    local file=$SCRIPT_DIRECTORY/init.d/$file.conf

    if [ ! -f "$file" ] ; then
      message "${PROBLEM_COLOR}Unable to find file $file...${DEFAULT_COLOR}"
      continue
    fi

    if [ -f "$target_file" ] ; then
      _init_merge_config_file $file $target_file
    else
      install -m 644 $file $target_file
    fi
  done

}


#---------------------------------------------------------------------
#=item init_prepare_install <init script>
##
## Prepares installation of an init-script.
##
## Creates the variable $INITPROVIDES which contains facility provided by the
##   script (if any)
##
#---------------------------------------------------------------------
init_prepare_install()
{

  local script_name="$1"
  local script_path="$SCRIPT_DIRECTORY/init.d/$script_name"
  local script_provides=$( grep '^[:space:]*PROVIDES' $script_path )
  script_provides=$( eval "( ${script_provides:=:} ; echo \$PROVIDES ; )" )

  [ -z "$script_provides" ] && return

  query "Set $script_name to be the default provider of $script_provides?" y \
      || return

  # If the variable isn't in the config file then we need to make sure we don't
  # use an old instance of it from another spell.
  grep -q "^INITDSCRIPT_PROVIDES=" $SPELL_CONFIG || INITDSCRIPT_PROVIDES=""

  # Unfortunately not very fast. Can be made speedier by exporting a variable
  # and have use_initd write it after the looping is done.
  local tmp=$( grep -v "^INITDSCRIPT_PROVIDES=" $SPELL_CONFIG )
  echo $tmp > $SPELL_CONFIG
  echo "INITDSCRIPT_PROVIDES=\"$script_name:$script_provides $INITDSCRIPT_PROVIDES\"" >> $SPELL_CONFIG

}


#---------------------------------------------------------------------
#=item init_install <init script>
##
## * Makes a backup of an existing script.
## * Installs the new script into the correct runlevel.
## * Installs any config file used by the script.
##
#---------------------------------------------------------------------
init_install()
{

  local script_name="$1"
  local script_path="$SCRIPT_DIRECTORY/init.d/$script_name"
  local script_runlevel=$( grep '^[:space:]*RUNLEVEL' $script_path )
  script_runlevel=$( eval "( $script_runlevel ; echo \$RUNLEVEL )" )

  [ "$script_runlevel" = "s" ] && script_runlevel="S"

  if [ -z "$script_runlevel" ] ; then
    message "Init script $script_name doesn't contain good RUNLEVEL variable..."
    return
  fi

  message "Installing $script_name to runlevel $script_runlevel..."

  (
    . /etc/sysconfig/init
    
    local runlevel_dir="$RUNLEVELS_DIR/%$script_runlevel"

    if [ ! -d "$runlevel_dir" ] ; then
      message -n "${PROBLEM_COLOR}"
      message -n "Unable to install $script_name to runlevel $script_runlevel. "
      message "Runlevel do not exist or is not implemented as a directory."
      message -n ${DEFAULT_COLOR}
      exit 1
    else
      _init_make_backup $script_path $runlevel_dir/$script_name
      install -m 754 $script_path $runlevel_dir
      _init_install_conf_files $( _init_get_conf_files $script_path )
    fi
  )

}


#---------------------------------------------------------------------
#=item init_post_install
##
## Does cleanup if necessary. Must be run _after_ installwatch has stopped.
##
#---------------------------------------------------------------------
init_post_install()
{
  (
    IFS="$WHITESPACE_IFS"
    for sp in $INITDSCRIPT_PROVIDES ; do
      IFS=":"
      set $sp   # $1 - script name, $2 - facility

      if ! sedit "s/^\([:space:]*$2\)=.*/\1=$1/" \
            /etc/sysconfig/facilities ; then
        message -n "${PROBLEM_COLOR}Unable to modify facilities file to make "
        message "$1 provider of $2.${DEFAULT_COLOR}"
      else
        message "Made $1 provider of $2"
      fi
    done
  )
}

#---------------------------------------------------------------------
##=back
##
##=head1 LICENSE
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#---------------------------------------------------------------------
