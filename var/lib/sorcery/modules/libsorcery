#!/bin/bash
#---------------------------------------------------------------------
##
## @Synopsis Set of functions used by the internal sorcery scripts
##
## This should really be home to things related to the sorcery script
## itself, not a repository for other functions. (Andrew 5/29/04)
##
## @Copyright Original version Copyright 2001 by Kyle Sallee
## @Copyright Additions/Corrections Copyright 2002 by the Source Mage Team
##
#---------------------------------------------------------------------

#---------------------------------------------------------------------
## @param branch
##
## Updates the sorcery scripts to their latest version for specified
## branch.
##
#---------------------------------------------------------------------
function update_sorcery_scripts() {

  BRANCH=$1

  debug "libsorcery" "update_sorcery_scripts() (sorcery-$BRANCH)"

  . /etc/sorcery/update/DETAILS          &&
  {
    #This section is to make sure that all sorcery dependencies are cast
    #Keep this outer if until basesystem is in the grimoires properly. (2002/10/13)
    if [[ `codex_find_spell_by_name basesystem` ]] ; then
      if ! ( spell_installed basesystem ||
             spell_held basesystem  )
      then
        cast basesystem
      fi
      cast --fix basesystem
    fi
  }

  INST_LOG="/etc/sorcery/update/sorcery-$BRANCH.log"
  CACHE="/tmp/$SPELL-$VERSION-$BUILD.tar"
  FORCE_DOWNLOAD=1
  C_LOG=/tmp/$SPELL.compile.log
  TMP_LOG="/tmp/$SPELL-$BRANCH"
  IW_LOG="/tmp/$SPELL.iw"

  if [ -f $INST_LOG ]; then
    mv $INST_LOG $INST_LOG.prev
  fi

  echo "$SOURCE  ${SOURCE_URL[*]}"|download_files "for sorcery update" "$SOURCE_CACHE" "no" "neither"

  FILENAME=`guess_filename $SOURCE_CACHE/$SOURCE`

  # pre build
  mk_source_dir  $SOURCE_DIRECTORY              &&
  cd $INSTALL_ROOT/usr/src                      &&
  bzip2  -cdf   $FILENAME |
  tar --owner=root --group=root -xf /dev/stdin  &&
  cd      $SOURCE_DIRECTORY                     &&
  invoke_installwatch                           &&

  # build
  (
  echo `pwd` &&
  prepare_install  &&
  ./install
  ) > $C_LOG 2>&1                       &&

  # post build
  devoke_installwatch                    &&
  cd /                                   &&
  #archive                                &&
  track                                  &&
  unlock_resources "libgrimoire" "install" &&
  # post install
#  rm  -f  /var/lock/casting.sorcery      &&

  report  $INST_LOG  "Install log"       &&
  sound SUCCESS                          &&

  SORCERY_VERSION=`cat /etc/sorcery/version`
  if [ $? -eq 0 ] ; then
    activity_log "update" "sorcery-$BRANCH" "$SORCERY_VERSION" "success"
    rm_source_dir
  else
    activity_log "update" "sorcery-$BRANCH" "$SORCERY_VERSION" "failure"
    if [[  $CLEAN_SOURCE == on ]]; then
      rm_source_dir
    fi
  fi

  message "${MESSAGE_COLOR}Current ${SPELL_COLOR}sorcery-$BRANCH${DEFAULT_COLOR} ${MESSAGE_COLOR}version ${VERSION_COLOR}$SORCERY_VERSION${DEFAULT_COLOR}"

  sorcery_history
}


## This routine is depreciated in favor of download_files
function get() {

  debug "libsorcery" "get() $*"

  if  [  -n  "$*"  ] ;  then

    connect                                       &&
    url_download  $*                              &&
    testpack      $FILE                           &&
    mv            $FILE  $SOURCE_CACHE            &&
    touch         $SOURCE_CACHE/$FILE

  fi

}

#---------------------------------------------------------------------
##
## Menu query to user asking to set the nice value which sorcery should
## use to run proccesses at.
##
#---------------------------------------------------------------------
function set_nice()  {

  PROMPT="Please enter the process priority sorcery should run at."

  if  NICE=`eval $DIALOG '  --ok-label  "Commit"  \
                            --inputbox            \
                            "$PROMPT"             \
                            0 0  "$NICE"'`
  then
     modify_local_config "NICE" "$NICE"
  fi

}

#---------------------------------------------------------------------
## @param filename
## @param url
## @param url ...
##
## Downloads <filename> from one of the listed <url>s.  The file
## is not downloaded if it is already in the source cache unless:
## - it's lifespan has expired
## - the user has requested a forced download
##
## This routine is depreciated in favor of download_files
##
#---------------------------------------------------------------------
function dl_source()  {

  debug "libsorcery" "dl_source() $*"

  if  [  -n  "$1"  ];  then

    FILE="$1"
    shift  1

    remove_old_cache_src $FILE   #Removes if it's lifespan is over

    if  ! file_exists_in_cache $FILE  ||  [  -n  "$FORCE_DOWNLOAD"  ]
    then
      message  "${MESSAGE_COLOR}Downloading source file"  \
               "${FILE_COLOR}${FILE}${DEFAULT_COLOR}"     \
               "for spell"                                \
               "${SPELL_COLOR}${SPELL}${DEFAULT_COLOR}"

      if [ -n "$LEAPFORWARD_URL" ] ; then
        LFURLFILE="$LEAPFORWARD_URL/$FILE"
      fi
      if  get  "$LFURLFILE" $*;  then
        activity_log  "summon"  "$SPELL"  "$VERSION"  "success"  "$URL downloaded"
      else
        local i
        local offset=$[${RANDOM} % $FURLNUM]
        for (( i=0; $i < $FURLNUM; i++ ));  do
          if  get  "${FALLBACK_URL_MIRROR[$[($i + $offset) % $FURLNUM]]}/$FILE";  then
            activity_log  "summon"  "$SPELL"  "$VERSION"  "success"  "$URL downloaded"
            return
          fi
        done
        message  "${PROBLEM_COLOR}Download of"            \
                 "${FILE_COLOR}${FILE}${DEFAULT_COLOR}"   \
                 "${PROBLEM_COLOR}for spell"              \
                 "${SPELL_COLOR}${SPELL}${DEFAULT_COLOR}" \
                 "${PROBLEM_COLOR}failed${DEFAULT_COLOR}"
      fi

    fi

  fi

}



#---------------------------------------------------------------------
## @param filename
##
## Displays and/or mails the contents of the file given as the first
## argument.
##
#---------------------------------------------------------------------
function report() {

  if  !  [  -f  $1  ];  then  return;  fi

  if  [  "$VIEW_REPORTS"  ==  "on"  ];  then

    debug  "libsorcery" "Prompting to view $2 for $SPELL"

    VIEW_PROMPT="View $2 for ${SPELL_COLOR}${SPELL}-${VERSION_COLOR}${VERSION}${DEFAULT_COLOR}?"
    sound  REPORT
    if  query  "$VIEW_PROMPT" n;  then  $PAGER  $1;  fi
  fi

  if  [  "$MAIL_REPORTS"  ==  "on"  ];  then
    debug  "libsorcery" "Mailing report ($2) for $SPELL to $SORCERER"
    date  -u  |
    mail  -s  "Sorcery Report : $HOSTNAME : $2 for $SPELL-$VERSION"  \
              -a $1 $SORCERER 2>/dev/null
  fi

  true

}


#---------------------------------------------------------------------
## @param filename
##
## Given a filename, will return the actual filename if a similar
## filename with a different extension exists.
##
#---------------------------------------------------------------------
function guess_filename()  {

  FILENAME=$1

  debug  "libsorcery" "Running guess_filename() on $FILENAME"

  BASENAME=`echo  $FILENAME         |
            sed  "s/\.tar\.gz$//"   |
            sed  "s/\.tgz$//"       |
            sed  "s/\.tar\.bz2$//"`

  if    [  -f  $FILENAME          ];  then  echo  $FILENAME
  elif  [  "$FUZZ"  ==  "off"     ];  then  return  1
  elif  [  -f  $BASENAME.tar.gz   ];  then  echo  $BASENAME.tar.gz
  elif  [  -f  $BASENAME.tar.bz2  ];  then  echo  $BASENAME.tar.bz2
  elif  [  -f  $BASENAME.tgz      ];  then  echo  $BASENAME.tgz
  else  false
  fi

}


#---------------------------------------------------------------------
## @param filename
##
## Given a file, testpack runs the decompression program for that file
## in test mode (-t option).  Returns the exit status.
##
#---------------------------------------------------------------------
function testpack() {

  FILENAME=`guess_filename                $1`  ||
  FILENAME=`guess_filename  $SOURCE_CACHE/$1`

  if [  -f  $FILENAME  ]; then

    debug  "libsorcery" "Running testpack() on $FILENAME"

    COMPRESSOR=`$FILEPROG  -b  $FILENAME  |  cut  -d ' '  -f1`    &&

    debug  "libsorcery" "Compressor guessed to be $COMPRESSOR"    &&

    case  $COMPRESSOR  in
          bzip2)  bzip2  -tf   $FILENAME   1>/dev/null 2>&1  ;;
           gzip)  gzip   -tf   $FILENAME   1>/dev/null 2>&1  ;;
      compress*)  gzip   -tf   $FILENAME   1>/dev/null 2>&1  ;;
            Zip)  unzip  -tq   $FILENAME   1>/dev/null 2>&1  ;;
            RPM)  rpmunpack  < $FILENAME   |                 \
                  gzip   -t                1>/dev/null 2>&1  ;;
              *)  ! filename_indicates_compression $FILENAME ;;
    esac
  fi

}


#---------------------------------------------------------------------
##
## Saves the current libraries associated with the spell, from /lib
## and /usr/lib into $SOURCE_DIRECTORY/old.libraries/
## Also runs ldconfig with the saved libraries.
##
#---------------------------------------------------------------------
function save_libraries()  {

  if    [  -z  "$SOURCE_DIRECTORY"  ]
  then  return
  fi

  debug  "libsorcery" "Running save_libraries()"

  OLD_LIBS=$SOURCE_DIRECTORY/old.libraries
  mkdir  -p  $OLD_LIBS

  SAVED=$OLD_LIBS/$SPELL.saved.libraries
  lock_file $SAVED
  rm  -rf  $SAVED

  OLD_VERSION=`installed_version  $SPELL`
      OLD_LOG=$INSTALL_LOGS/$SPELL-$OLD_VERSION

  grep   "^/lib/\|^/usr/lib"  $OLD_LOG  |
  while  read        LINE;  do

    if   [  -f      $LINE   ]  &&
         file  -bL  $LINE   |
         grep  -q   "shared object"
    then
      if  [  -h  $LINE  ];  then
        DEST=$(  basename  $(  ls   -la  "$LINE"  |
                               cut  -d  '>'  -f2  |
                               cut  -c  2-
                            )
              )
        ln  -sf  $DEST  $OLD_LIBS/`basename  $LINE`
      else
        cp  $LINE  $OLD_LIBS
      fi
      echo       $OLD_LIBS/`basename  $LINE`  >>  $SAVED
    fi


  done

  ldconfig  $OLD_LIBS
  unlock_file $SAVED

  if  [  -z   "$LD_LIBRARY_PATH"  ]
  then  export  LD_LIBRARY_PATH="$OLD_LIBS"
  else  export  LD_LIBRARY_PATH="$OLD_LIBS:$LD_LIBRARY_PATH"
  fi

  if  [  "$SPELL"  ==  "glibc"         ]   ||
      [  "$SPELL"  ==  "glibc-custom"  ] ;  then
    if [ -e $OLD_LIBS/ld-$OLD_VERSION.so ] ; then 
      [[ `uname -m` == ppc* ]] && ln  -sf  $OLD_LIBS/ld-$OLD_VERSION.so  ${INSTALL_ROOT}/lib/ld.so.1 ||
      ln  -sf  $OLD_LIBS/ld-$OLD_VERSION.so  ${INSTALL_ROOT}/lib/ld-linux.so.2 
    fi
  fi

}


#---------------------------------------------------------------------
##
## Runs default ldconfig to stop using the saved libraries
##
#---------------------------------------------------------------------
function release_saved_libraries()  {
  ldconfig
}


#---------------------------------------------------------------------
##
## Recovers from a CTRL-C while casting a spell
##
#---------------------------------------------------------------------
function spell_recover()  {

  debug  "libsorcery" "Running spell_recover()"

  message  "${MESSAGE_COLOR}Aborting dispel of ${SPELL_COLOR}${SPELL}" \
           "${MESSAGE_COLOR} and recovering${DEFAULT_COLOR}"

  CURRENT_VERSION=$(installed_version  $SPELL)
  CACHE_COMP="$INSTALL_CACHE/$SPELL-$CURRENT_VERSION-$BUILD.tar$EXTENSION"
  CONTINUE=false

  if    [  !      -f  $CACHE_COMP   ];  then
    false
  elif  [         -n  "$EXTENSION"  ];  then
    CONTINUE=true
  elif  $COMPRESSBIN  -tf  $CACHE_COMP
  then
    CONTINUE=true
  fi
 
  if  $CONTINUE
  then
 
    if  [  -n  "$EXTENSION"  ];  then
      $COMPRESSBIN  -cd  $CACHE_COMP  |  tar  -Pkx  2>/dev/null
    else
      tar  -Pkxf  $CACHE_COMP  2>/dev/null
    fi
    add_spell  $SPELL  installed  $CURRENT_VERSION
  else
    false
  fi

  exit  130

}


#---------------------------------------------------------------------
## @param spell name
## @Stdout section
## Returns the section a spell is in.
##
#---------------------------------------------------------------------
function find_section()  {

  debug  "libsorcery" "Running find_section() on $1"

  codex_get_spell_section_name  $1

}


#---------------------------------------------------------------------
##=item directories
##
## @Stdin list of files/dirs/..
## @Stdout list of dirs
##
## Reads a list from standard input, and prints out each entry that is
## a directory (and not a symbolic link to a directory).
#---------------------------------------------------------------------
function directories() {

  while  read       ITEM;  do
    if  [     -d  "$ITEM"  ]   &&
        !  [  -h  "$ITEM"  ];  then
      echo        "$ITEM"
    fi
  done

}


#---------------------------------------------------------------------
## @Stdin list of files/dirs/..
## @Stdout list of files
## Reads a list from standard input, and prints out each entry that is
## a file (and not a symbolic link to a file).
##
#---------------------------------------------------------------------
function files()  {

  while  read       ITEM;   do
 	
    if  [     -f  "$ITEM"  ]   &&
        !  [  -h  "$ITEM"  ];  then
      echo "$ITEM"
    fi
  done

}


#---------------------------------------------------------------------
## @Stdin list of files/dirs/..
## @Stdout list of symlinks
## Reads a list from standard input, and prints out each entry that is
## a symbolic linke
##
#---------------------------------------------------------------------
function symlinks()  {

  while  read    ITEM;   do
    if  [  -h  "$ITEM"  ];  then
      echo     "$ITEM"
    fi
  done

}


#---------------------------------------------------------------------
## @param filename
## @Stdin list of files/dirs/..
## @Stdout filtered list
## First argument is a file that contains filenames.  C<filter> will
## filter standard input to remove any filenames that match an entry
## in that file.  Used to filter out excluded or protected files from
## a list of files.
##
#---------------------------------------------------------------------
function filter() {

  if  [  -f  $1  ];  then

     DIRS=`directories  <  $1  2>/dev/null`
    FILES=`files        <  $1  2>/dev/null`
     SYMS=`symlinks     <  $1  2>/dev/null`

    RID_LIST=`for  DIR   in  $DIRS;   do  echo  -n  "^$DIR\|";     done
              for  FILE  in  $FILES;  do  echo  -n  "^$FILE\$\|";  done
              for  SYM   in  $SYMS;   do  echo  -n  "^$SYM\$\|";   done
              echo  -n  "/dev/null"`

    grep  -v  "$RID_LIST"

  else
    cat
  fi

}


#---------------------------------------------------------------------
## @param file
##
## If C<PRESERVE> is off, will move the file to filename.YYYYMMDD.  If
## C<PRESERVE> is on, the file will not be moved.
##
#---------------------------------------------------------------------
function reap_modified_file()  {

  message  "${FILE_COLOR}${1}${DEFAULT_COLOR}"
  message  "${MESSAGE_COLOR}was previously modified by SA?"
  case  $PRESERVE  in
     on)  message  "Therefore, it was not reaped."  ;;
    off)  SAVE="$1.`date  -u  +%Y%m%d`"
          mv  $1  $SAVE
          message  "Therefore, it was moved to"
          message  "${FILE_COLOR}${SAVE}"  ;;
  esac
  message  "${DEFAULT_COLOR}"

}


#---------------------------------------------------------------------
## @Stdin list of files
## @Stdout list of directories
##
## Given a list of files from standard input, returns the directory
## of each file.
##
## Note: Is a duplicate of get_dirnames. 2003-09-28 Martin
#---------------------------------------------------------------------
function dirnames()  {
  while  read  FILE;  do  dirname  "$FILE";  done;
}


#---------------------------------------------------------------------
## @Stdin list of files
##
## Given a list of files from standard input, deletes each file.
## Performs a "rm -f" on each file given in standard input, so be
## careful using this function!
##
#---------------------------------------------------------------------
function reap_regular_files()  {
  debug "libsorcery" "reap_regular_files()"
  while  read  FILE;  do  rm  -f   "$FILE";  done;
}


#---------------------------------------------------------------------
## @Stdin list of files
##
## Reads a list of files from standard input.  If the file has been
## modified (md5sum doesn't match the stored md5sum), then function
## C<reap_modified_file> is called.  Otherwise, the file is deleted.
##
#---------------------------------------------------------------------
function reap_config_files()  {

  debug "libsorcery" "reap_config_files()"
  while  read  FILE;  do

    if    grep  -q  "$(  md5sum  "$FILE" )"  "$MD5S"
    then  rm    -f               "$FILE"
    else  reap_modified_file     "$FILE"
    fi

  done

}


#---------------------------------------------------------------------
##=item reaper
## @param file
## @param file
##
## First argument is a file containing a list of files to reap.
## Second argument is a file containing md5 sums of those files, used
## to detect if a config file has been modified.  Config files are any
## files in /etc or any of its sub-directories.
##
#---------------------------------------------------------------------
function reaper()  { (
#  Example:  reaper "$INSTALL_LOG"  "$MD5_LOG"

  debug  "libsorcery" "Running reaper() on $1"

  if  !  [  "$REAP"  ==  "on"  ]   ||
      !  [  -f  $1             ];  then  return
  fi

  MD5S=$2
  MD5S=${MD5S:=/dev/null}

        UNIQUE="$$.$RANDOM"
  REAPER_FILES="/tmp/reaper.$UNIQUE.files"
   REAPER_DIRS="/tmp/reaper.$UNIQUE.dirs"
   REAPER_SYMS="/tmp/reaper.$UNIQUE.syms"

  rm  -f  $REAPER_FILES  $REAPER_DIRS  $REAPER_SYMS

  filter  $PROTECTED  <  $1  |
  filter  $EXCLUDED          |
  while   read  ITEM;  do
    if    [  -h  "$ITEM"  ];  then  echo  "$ITEM"  >>  $REAPER_SYMS
    elif  [  -f  "$ITEM"  ];  then  echo  "$ITEM"  >>  $REAPER_FILES
    elif  [  -d  "$ITEM"  ];  then  echo  "$ITEM"  >>  $REAPER_DIRS
    fi
  done

  [     -f           $REAPER_FILES  ]  &&
  grep      "^/etc"  $REAPER_FILES     |
  reap_config_files

  [     -f           $REAPER_FILES  ]  &&
  grep  -v  "^/etc"  $REAPER_FILES     |
  reap_regular_files

  [  -f  $REAPER_SYMS   ]  &&  rm     -f  `cat          $REAPER_SYMS`                         2>/dev/null
  [  -f  $REAPER_DIRS   ]  &&  rmdir      `sort  -r     $REAPER_DIRS`                         2>/dev/null
  [  -f  $REAPER_FILES  ]  &&  rmdir      `dirnames  <  $REAPER_FILES  |  uniq  |  sort  -r`  2>/dev/null

  rm  -f  $REAPER_FILES  $REAPER_DIRS  $REAPER_SYMS

) }


#---------------------------------------------------------------------
## @param queue filename
## @param items to remove ...
##
## The first argument is the name of the file containing the queue.
## If a second argument is given, any items in the queue that match
## the second argument are removed from the queue.  Otherwise, the top
## line of the queue is removed, and returned.
##
#---------------------------------------------------------------------
function pop_queue() {  (

  local ITEM=`esc_str $2`
  local exit_code=0

  tQUEUE_FILE=$( lock_start_transaction $1 )
  if  !  [  -f  "$1"  ];  then
    exit_code=1
  elif  [  -n  "$ITEM"  ];  then
    grep  -v  "^$ITEM\$"  $1 > $tQUEUE_FILE
  else
    FOUND=`sed  -n  1p  $1`

    if  [  -z  "$FOUND"  ];  then
      exit_code=1
    else
      FOUND=`esc_str $FOUND`
      grep  -v  "^$FOUND$"  $1 > tQUEUE_FILE
      echo  $FOUND
    fi
  fi
  lock_commit_transaction $1

  return $exit_code

) }


#---------------------------------------------------------------------
## @param filename
##
## The first argument is the name of the file that installed correctly
## and will be removed from the install file (this makes a failure of 
## the casting of the queue not have to recast completed spells).
##
#---------------------------------------------------------------------
function pop_install_queue() {  

  pop_queue  $INSTALL_QUEUE  "$1"

}


#---------------------------------------------------------------------
## @param queue filename
## @param item to add
## The first argument is the name of the file containing the queue.
## The second argument is an item to add to the end of the queue.  If
## the item exists anywhere in the queue, the item is removed from the
## queue before being added at the end.
##
#---------------------------------------------------------------------
function push_queue()  {

  pop_queue  "$1"  "$2";  echo  "$2" >>  $1;

}


#---------------------------------------------------------------------
## @param spell
##
## Adds the given spell to the install queue and removes it from the
## remove queue.
##
#---------------------------------------------------------------------
function push_install_queue() {

  pop_queue   $REMOVE_QUEUE    "$1"
  pop_queue   $INSTALL_QUEUE   "$1"
  !  spell_installed           "$1"  &&
  push_queue  $INSTALL_QUEUE   "$1"

}


#---------------------------------------------------------------------
## @param spell
##
## Adds the given spell to the remove queue and removes it from the
## install queue.
##
#---------------------------------------------------------------------
function push_remove_queue() {

  pop_queue   $INSTALL_QUEUE  "$1"
  pop_queue   $REMOVE_QUEUE   "$1"
  spell_installed             "$1"  &&
  push_queue  $REMOVE_QUEUE   "$1"

}

#---------------------------------------------------------------------
##
## Sets some environment variables (such as C<CFLAGS>) based on the
## option passed.  Options may be on or more of:  i386, i486, i586,
## pentium, pentium-mmx, i686, pentiumpro, pentium2, pentium3,
## pentium4, k6, k6-2, k6-3, athlon, athlon-tbird, athlon-4,
## athlon-xp, athlon-mp, powerpc, speedy, tiny, risky, strip,
## combreloc
##
#---------------------------------------------------------------------
function optimize()  {

  debug "libsorcery" "In optimize(), ARCHITECTURE='${ARCHITECTURE}'"
  debug "libsorcery" "TARGET='${TARGET}'"
  debug "libsorcery" "OPTIMIZATIONS='${OPTIMIZATIONS}'"

  unset  CFLAGS CXXFLAGS LDFLAGS LC_ALL
  unset  COMBRELOC FAST PRELINK RISKY SMALL SPEEDY STATIC STRIP TINY

  local SPECFILE
  SPECFILE=`find ${ARCH_SPECS} -name "$ARCHITECTURE"`;
  [  -x  "$SPECFILE"  ]  &&  .  "$SPECFILE"

  BUILD=${HOST}

  if  [[ $CROSS_INSTALL == on ]]; then
    if  [[ $TARGET ]]; then
      SPECFILE=`find ${ARCH_SPECS} -name "$TARGET"`;
      [  -x  "$SPECFILE"  ]  &&  .  "$SPECFILE"
    fi
    invoke_cross_environment
  fi
  debug "libsorcery" "BUILD is $BUILD, HOST is $HOST"

  CFLAGS="$CFLAGS -pipe"
  for  PARAM  in  $OPTIMIZATIONS;  do
    case  $PARAM  in
      combreloc)
        LDFLAGS="$LDFLAGS -z combreloc"
        COMBRELOC="on"
        ;;

      prelink)
        CFLAGS="$CFLAGS -DPIC -fPIC"
        PRELINK="on"
        ;;

      risky)
        CFLAGS="$CFLAGS -ffast-math -funroll-loops"
        RISKY="on"
        ;;

      speedy)
        CFLAGS="$CFLAGS $FAST"
        SPEEDY="on"
        ;;

      static)
        LDFLAGS="$LDFLAGS -static"
        STATIC="on"
        ;;

      strip)
        LDFLAGS="$LDFLAGS -s"
        STRIP="on"
        ;;

      tiny)
        CFLAGS="$CFLAGS $SMALL"
        TINY="on"
        ;;

    esac
  done

  export  CFLAGS="-O $CFLAGS"
  export  CXXFLAGS="$CFLAGS"
  export  LDFLAGS="$LDFLAGS"
  export  LC_ALL="C"

}


#---------------------------------------------------------------------
## @Stdout install queue
##
## List files in install queue, give user chance to modify it.
##
#---------------------------------------------------------------------
function list_install_queue() {
  if  [  -f  $INSTALL_QUEUE  ];  then
    lock_file $INSTALL_QUEUE

    message -n "The following spells will be updated:"
    message "${SPELL_COLOR}"
    cat  $INSTALL_QUEUE | column
    message "${DEFAULT_COLOR}"

    if    query  "Do you wish to edit ${FILE_COLOR} $INSTALL_QUEUE ${DEFAULT_COLOR}?" n
    then  edit_file  $INSTALL_QUEUE
    fi

    if  [  -n  "`cat  $INSTALL_QUEUE`"  ];  then
      SPELLS=`cat $INSTALL_QUEUE`
    fi

    unlock_file $INSTALL_QUEUE
  else
    message "${MESSAGE_COLOR}No spells listed in queue.${DEFAULT_COLOR}"
  fi
}


#---------------------------------------------------------------------
##
## Checks all installed spells for newer versions, and creates an
## install queue.
##
#---------------------------------------------------------------------
function update_install_queue()  { (

  message  "${CHECK_COLOR}Generating list of spells to update... ${DEFAULT_COLOR} "
  wait_flag_up

  rm  -f  $INSTALL_QUEUE
  for  LINE  in  `all_spell_status`;  do

  	#0=spell, 1=date, 2=status, 3=version
	explode "$LINE" ":" "INFO"

    if  [  "${INFO[2]}"  ==  "installed"  ]          &&
        codex_set_current_spell_by_name  ${INFO[0]};  then

      if  [[ $VERSION != ${INFO[3]} ]]  ||
          [[     -z ${INFO[1]}      ]]	||
	  	  (( UPDATED  >  ${INFO[1]} ))
	  then
            QUEUE="$QUEUE\n$SPELL"
      fi

    fi

  done

  lock_file $INSTALL_QUEUE
  echo -e "$QUEUE" | sort | uniq > $INSTALL_QUEUE
  unlock_file $INSTALL_QUEUE

  wait_flag_down

) }


#---------------------------------------------------------------------
##
## Builds all spells in the install queue.
##
#---------------------------------------------------------------------
function build_install_queue()  {

  if  [  -f  $INSTALL_QUEUE  ];  then
    lock_file $INSTALL_QUEUE

    message  "The following spells will be updated :"
    cat  $INSTALL_QUEUE

    unset  SPELL
    if    query  "Do you wish to edit ${FILE_COLOR}$INSTALL_QUEUE${DEFAULT_COLOR}?" n
    then  edit_file  $INSTALL_QUEUE
    fi

    if  [  -n  "`cat  $INSTALL_QUEUE`"  ];  then
      cast      `cat  $INSTALL_QUEUE`
      rm              $INSTALL_QUEUE
    fi

    unlock_file $INSTALL_QUEUE
  else
    message  "No spells will be updated."
  fi
}


#---------------------------------------------------------------------
## @Stdout history
##
## Display the history of the install queue for review
##
#---------------------------------------------------------------------
function install_queue_history() {
  local PAGER2
  if [ "$PAGER" == "less" ] ; then PAGER2="more"; else PAGER2="$PAGER"; fi
  local spell=
  for spell in `cat $INSTALL_QUEUE`; do
    local date="`grep "^${spell}:" /var/state/sorcery/packages | cut -d':' -f2`"
    local datedash="`echo "$date" | cut -c1-4`-`echo "$date" | cut -c5-6`-`echo "$date" | cut -c7-8`"
    (
      echo -e "Viewing history since last update ($datedash) for spell --  ${spell}  -- :" && 
      echo                 &&
      gaze history $spell
    ) |
      awk -v date="$date" '{ d = (strtonum(substr($0,1,4) substr($0,6,2) substr($0,9,2)) < date && strtonum(substr($0,1,4)) > 0) }; NR == 1, d { if (!d) print }' | 
      $PAGER2
    query "Would you like to ${RED} remove ${QUERY_COLOR} spell ${SPELL_COLOR} $spell ${QUERY_COLOR} from the install queue?" n &&
      sedit "s/^$spell$//" $INSTALL_QUEUE &&
      echo -e "${QUERY_COLOR} The spell ${SPELL_COLOR} $spell ${QUERY_COLOR} removed from $INSTALL_QUEUE.${DEFAULT_COLOR}"
  done
}

#---------------------------------------------------------------------
## @param grimoire-path
## @Stdout history
## Display the history of the grimoire given for review
#---------------------------------------------------------------------
function grimoire_history() {

  if [ -e $grimoire/ChangeLog ] ; then 
    local PAGER2
    if [ "$PAGER" == "less" ] ; then 
      PAGER2="more" 
    else 
      PAGER2="$PAGER" 
    fi
    local grimoire="$1"
    local grimoirename="${grimoire##*/}"
    local date="`cat "$STATE_DIRECTORY/$grimoirename.lastupdate" 2> /dev/null`"
    [ -z "$date" ] && date="20030818"
    local datedash="`echo "$date" | cut -c1-4`-`echo "$date" | cut -c5-6`-`echo "$date" | cut -c7-8`"
    (
      echo -e "Viewing history since last update ($datedash) for grimoire --  ${grimoirename}  -- :" && 
      echo                 &&
      cat "$grimoire/ChangeLog" 2> /dev/null
    ) |
    awk -v date="$date" '{ d = (strtonum(substr($0,1,4) substr($0,6,2) substr($0,9,2)) < date && strtonum(substr($0,1,4)) > 0) }; NR == 1, d { if (!d) print }' | 
    $PAGER2
  else
    echo  "No ChangeLog in the $grimoire Grimoire, skipping viewing..."
    echo  ""
  fi
  echo "`date +%Y%m%d`" > "$STATE_DIRECTORY/$grimoirename.lastupdate"
}


#---------------------------------------------------------------------
## @Stdout history
## Display the history of sorcery for review
##
#---------------------------------------------------------------------
function sorcery_history() {
  local PAGER2
  if [ "$PAGER" == "less" ] ; then PAGER2="more"; else PAGER2="$PAGER"; fi
  local date="`cat "$STATE_DIRECTORY/sorcery.lastupdate" 2> /dev/null`"
  [ -z "$date" ] && date="20030818"
  local datedash="`echo "$date" | cut -c1-4`-`echo "$date" | cut -c5-6`-`echo "$date" | cut -c7-8`"
  (
    echo -e "Viewing history since last update ($datedash) for sorcery :" && 
    echo                 &&
    cat "${INSTALL_ROOT}/usr/doc/sorcery/ChangeLog"
  ) |
    awk -v date="$date" '{ d = (strtonum(substr($0,1,4) substr($0,6,2) substr($0,9,2)) < date && strtonum(substr($0,1,4)) > 0) }; NR == 1, d { if (!d) print }' | 
    $PAGER2
  echo "`date +%Y%m%d`" > "$STATE_DIRECTORY/sorcery.lastupdate"
}


#---------------------------------------------------------------------
##
## Attempt to fix any spells that may be broken.
##
#---------------------------------------------------------------------
function fix_installed_spells()  {

  local ANSWER=

  [  "$AUTOFIX"  ==  "on"  ]  &&  ANSWER=y  ||  ANSWER=n
  if  query  "Attempt to fix spells that may have become broken ?" $ANSWER;  then
    cast  --fix;
  fi

  if  [  "$AUTOPRUNE"  ==  "on"  ];  then  prune;  fi
}


#---------------------------------------------------------------------
##
## Casts all spells in the install queue.
##
## DEPRICATED: tagged for removal - nkj
##
#---------------------------------------------------------------------
function upgrade_install_queue()  {

  if  [  -f  $INSTALL_QUEUE  ];  then
    lock_file $INSTALL_QUEUE

    message  "The following spells will be updated:"
    cat  $INSTALL_QUEUE

    unset  SPELL
    if    query  "Do you wish to edit ${FILE_COLOR}$INSTALL_QUEUE${DEFAULT_COLOR}?" n
    then  edit_file  $INSTALL_QUEUE
    fi

    if  [  -n  "`cat  $INSTALL_QUEUE`"  ];  then
      cast      `cat  $INSTALL_QUEUE`
      rm              $INSTALL_QUEUE
    fi

    unlock_file $INSTALL_QUEUE
  else
    message  "No spells will be updated."
  fi

  local ANSWER

  [  "$AUTOFIX"  ==  "on"  ]  &&  ANSWER=y  ||  ANSWER=n
  if  query  "Attempt to fix spells that may have become broken ?" $ANSWER;  then
    cast  --fix;
  fi

  if  [  "$AUTOPRUNE"  ==  "on"  ];  then  prune;  fi
}


#---------------------------------------------------------------------
## @Stdout log files list
## Returns a list of the log files for each spell.
##
#---------------------------------------------------------------------
function log_list()  {

  for  LINE  in  `all_spell_status`;  do
    SPELL=`echo  $LINE  |  cut  -d  :  -f1`
      VER=`echo  $LINE  |  cut  -d  :  -f4`
    echo  "$SPELL-$VER"
    echo  "$SPELL-$VER$EXTENSION"
  done

}


#---------------------------------------------------------------------
##
## Removes stale logs.
##
#---------------------------------------------------------------------
function clean_logs()  {

  wait_flag_down
  message "${CHECK_COLOR}Cleaning log files... ${DEFAULT_COLOR} "

  debug  "libsorcery" "Running clean_logs()"

  LOGS=`log_list`

  for  FILE  in  `ls  $INSTALL_LOGS`;  do
    if  !  echo  -e  "$LOGS"  |  grep  -q  $FILE;  then
      message  "Removing stale log  :  $INSTALL_LOGS/$FILE "
      rm                               $INSTALL_LOGS/$FILE
    fi
  done

  for  FILE  in  `ls  $COMPILE_LOGS`;  do
    if  !  echo  -e  "$LOGS"  |  grep  -q  $FILE;  then
      message  "Removing stale log  :  $COMPILE_LOGS/$FILE "
      rm                               $COMPILE_LOGS/$FILE
    fi
  done

  for  FILE  in  `ls  $MD5SUM_LOGS`;  do
    if  !  echo  -e  "$LOGS"  |  grep  -q  $FILE;  then
      message  "Removing stale log  :  $MD5SUM_LOGS/$FILE "
      rm                               $MD5SUM_LOGS/$FILE
    fi
  done

  for  GRIMOIRENAME  in  `codex_get_all_grimoires`;  do
    EMPTY=$(  find  $GRIMOIRENAME  -type d  -empty  |  grep  -v  "pam.d"  )
    if    [  -n  "$EMPTY"  ];  then
      rmdir   $EMPTY
    fi
  done

}


#---------------------------------------------------------------------
##
## Updates the activity log.
##
#---------------------------------------------------------------------
function activity_log()  { (

  lock_file $ACTIVITY_LOG

     DATE=`date  -u  +%Y%m%d:%H%M\(%z\)`
  COMMAND=$1
    SPELL=$2
  VERSION=$3
  OUTCOME=$4
     INFO=$5

  echo  -e "$DATE\t$COMMAND\t$SPELL\t$VERSION\t$OUTCOME\t$INFO"  >> $ACTIVITY_LOG
  unlock_file $ACTIVITY_LOG
) }


#---------------------------------------------------------------------
##
## Executes the spell's DETAILS file.
##
#---------------------------------------------------------------------
function run_details() {
  debug "libsorcery" "starting run_details for $SPELL"
  if  !  codex_set_current_spell_by_name  $SPELL;  then
    local  GRIMOIRES=`codex_get_all_grimoires`
    message  "${PROBLEM_COLOR}Unable to find spell"        \
             "${SPELL_COLOR}${SPELL}${PROBLEM_COLOR}"      \
             "in grimoire(s): $GRIMOIRES ${DEFAULT_COLOR}"
    false
  fi
}

#---------------------------------------------------------------------
##
## unsets variables set by DETAILS. <br>
## vars: SPELL VERSION SOURCE_DIRECTORY WEB_SITE UPDATED ENTERED SHORT SOURCE* 
## 
## Needs to be merged with the libcodex function since they are both
## needed to fully unset a DETAILS (afk 4/21/04)
##
#---------------------------------------------------------------------
function unset_details()  {

  local VARS="SPELL VERSION SOURCE_DIRECTORY WEB_SITE UPDATED ENTERED SHORT"
  local TEMP=""

  # Take care or SOURCEx and SOURCEx_URL
  for i in ${!SOURCE*} ; do
    TEMP=${TEMP}${i}\\n
  done
  VARS="$VARS `echo -e $TEMP | egrep "^SOURCE[[:digit:]]*(_URL)?$"`"
  unset TEMP

  for i in $VARS ; do
    unset $i
  done

}


#---------------------------------------------------------------------
## @param on/off
##
## First argument is "off" or "on" to turn console colors off or on
##
#---------------------------------------------------------------------
function color()  {

  case  $1  in
    off)  unset  SPELL_COLOR
          unset  VERSION_COLOR
          unset  QUERY_COLOR
          unset  DISPEL_COLOR
          unset  CHECK_COLOR
          unset  RESURRECT_COLOR
          unset  FILE_COLOR
          unset  SYMLINK_COLOR
          unset  PROBLEM_COLOR
          unset  MESSAGE_COLOR
          unset  DEFAULT_COLOR
          COLOR=off
          ;;
     on)  COLOR=on
          ;;
  esac

}



#---------------------------------------------------------------------
##
## Runs C<track> and C<archive> on the current spell.
##
## THIS FUNCTION IS DEPRECIATED AND SHOULD NOT BE CALLED FOR ANY REASON
##
#---------------------------------------------------------------------
function boost()	{ (

  debug  "libsorcery" "Running boost() on $SPELL THIS IS DEPRECIATED"
#
#     CACHE="/tmp/$SPELL-$VERSION-$BUILD.tar"
#CACHE_COMP="$INSTALL_CACHE/$SPELL-$VERSION-$BUILD.tar$EXTENSION"
#C_LOG_COMP="$COMPILE_LOGS/$SPELL-$VERSION$EXTENSION"
#   TMP_LOG="/tmp/$SPELL-$VERSION"
#  INST_LOG="$INSTALL_LOGS/$SPELL-$VERSION"
#   MD5_LOG="$MD5SUM_LOGS/$SPELL-$VERSION"
#    IW_LOG="/tmp/$SPELL.iw"
#
#  rm  -rf  $CACHE
#  rm  -rf  $INST_LOG
#  touch    $INST_LOG
#  rm  -rf  $TMP_LOG
#  rm  -rf  $MD5_LOG
#  touch    $MD5_LOG
#
#  track    &&
#  md5list < $INST_LOG > $MD5_LOG &&
#  archive
#
true
) }


#---------------------------------------------------------------------
## @Stdout spelllist
## Returns a list of all installed spells that use Linux-PAM
##
## NOTE: this will become useless when triggers are introduced.
##
#---------------------------------------------------------------------
function find_pam_aware()  { (

  cat  $SPELL_STATUS    |
  while  read  LINE;  do

     SPELL="`echo  $LINE  |  cut  -d  :  -f1`"
    STATUS="`echo  $LINE  |  cut  -d  :  -f3`"

    if  [  "$STATUS"  ==  "installed"  ]   ||
        [  "$STATUS"  ==  "held"       ];  then

      SPELL_DIRECTORY=`codex_find_spell_by_name  $SPELL`

      if    [  -d  "$SPELL_DIRECTORY/pam.d"  ]  &&
            [  "$SPELL"  !=  "Linux-PAM"              ]
      then  echo  $SPELL
      fi

    fi
  done

) }


#---------------------------------------------------------------------
##
## Given a list of source files, returns true if each file exists.
##
#---------------------------------------------------------------------
function verify_source()  { (


  for  SOURCE_FILE  in  $@;  do
    if  !  guess_filename  $SOURCE_CACHE/$SOURCE_FILE  >/dev/null
    then
      message  "${PROBLEM_COLOR}Missing ${FILE_COLOR}${1}${DEFAULT_COLOR}"
      message  "${PROBLEM_COLOR}Cast aborting.${DEFAULT_COLOR}"
      activity_log  "cast"  "$SPELL"  "$VERSION"  "failed"  \
                    "because it was missing source:  $1"
      return 1 
    fi
  done

  return 0

) }


#---------------------------------------------------------------------
## @param spell
## @Stdout filelist
## Returns a list of each source file used by a spell.  Most have only
## one, but xfree86 for example splits the sources into three separate
## source files.
##
#---------------------------------------------------------------------
function sources()  { (

  local i srcVar

  if  [  -z  "$SOURCE"  ];  then
    codex_set_current_spell_by_name  $1
  fi
  get_spell_files_and_urls|while read -a line; do
    echo "${line[0]}"
  done


) }

#---------------------------------------------------------------------
## @param spell
## @Stdout filelist
## Returns a list of each source file used by a spell.  Most have only
## one, but xfree86 for example splits the sources into three separate
## source files.
##
#---------------------------------------------------------------------
function source_urls()  { (

  local i srcVar

  if  [  -z  "$SOURCE"  ];  then
    codex_set_current_spell_by_name  $1
  fi
  get_spell_files_and_urls|while read -a line; do
    unset line[0]
    echo "${line[*]}"
  done


) }


#---------------------------------------------------------------------
## @Stdout filelist
## Returns a list of files that should not be pruned.
##
#---------------------------------------------------------------------
function generate_keep_list()  { (

  for  SPELL_DIRECTORY  in  `codex_get_all_spells`;  do
  (
    codex_set_current_spell  $SPELL_DIRECTORY
    sources  $SPELL
    echo     $SPELL-$VERSION-$BUILD.tar$EXTENSION
  )
  done

  #Add the README in the cache to list of files to keep
  echo  README

) }


#---------------------------------------------------------------------
##
## Removes unnecessary files from the source cache and install cache.
## 
#---------------------------------------------------------------------
function prune()  { (

  debug  "libsorcery" "Running prune()"
  local NO_KEEP KEEP
  local NUM_NO_KEEP=0
  
  # This if is useless. The su will run, then exit. The rest of the script will
  # continue to run as the original user, with no environment change
  # Who put this here? Why??
  if  [  "$UID"  !=  0  ];  then
    echo  "Enter the root password, please."
    su  - -c "DISPLAY=$DISPLAY PATH=$PATH"
  fi

  message "${MESSAGE_COLOR}Generating list of files to keep...${DEFAULT_COLOR}"
  KEEP="/tmp/prune.keep"
  generate_keep_list  >  $KEEP

  message "${MESSAGE_COLOR}Cleaning up source cache (${DEFAULT_COLOR}$SOURCE_CACHE${MESSAGE_COLOR})...${DEFAULT_COLOR}"
  NO_KEEP=$( find $SOURCE_CACHE -mindepth 1 -maxdepth 1 -type f  | awk -F/ 'BEGIN { 
				while (getline < "'$KEEP'") 
					Installed[$1] = 1; 
			}
			{
				if(!Installed[$NF]) 
					print $0;
			}' )
  if [[ ${NO_KEEP} ]] ; then
    NUM_NO_KEEP=$( echo "$NO_KEEP" | wc -l )
    if query "Remove $NUM_NO_KEEP files from $SOURCE_CACHE?" "y" ; then
      rm $NO_KEEP
    fi
  fi
  
  message "${MESSAGE_COLOR}Cleaning up install cache (${DEFAULT_COLOR}$INSTALL_CACHE${MESSAGE_COLOR})...${DEFAULT_COLOR}"
  NO_KEEP=$( find $INSTALL_CACHE -mindepth 1 -maxdepth 1 -type f  | awk -F/ 'BEGIN { 
				while (getline < "'$KEEP'") 
					Installed[$1] = 1; 
			}
			{
				if(!Installed[$NF]) 
					print $0;
			}' )
  if [[ ${NO_KEEP} ]] ; then
    NUM_NO_KEEP=$( echo "$NO_KEEP" | wc -l )
    if query "Remove $NUM_NO_KEEP files from $INSTALL_CACHE?" "y" ; then
  	  rm $NO_KEEP
    fi
  fi
  
  rm  -f  $KEEP

) }


#---------------------------------------------------------------------
##
## Adds /var/lib/sorcery/build to the C<PATH>
##
#---------------------------------------------------------------------
function invoke_build_dir() { 
  { 
    { [  "$CCACHE"  ==  "on"  ]  &&  spell_installed  ccache ; }  || 
    { [  -n "$DISTCC_HOSTS"   ]  &&  spell_installed  distcc ; } 
  }  &&  export  PATH="/var/lib/sorcery/build:$PATH" 
} 


#---------------------------------------------------------------------
## @param category/service
## @Stdout spelllist
##
## First argument is a category of spell.  Returns a list of spells
## that match that category.  For example,
## C<find_providers email-client> returns evolution,althea,mutt,etc.
##
#---------------------------------------------------------------------
function find_providers()  {
  feature="$1"

  (for  GRIMOIRE  in  $(codex_get_all_grimoires);  do
        gawk '/^'"$feature"'[[:blank:]]/ { print $2 }' \
                "$GRIMOIRE/$PROVIDE_INDEX_FILE"
  done) | get_basenames

}


#---------------------------------------------------------------------
## @Stdout filelist
## Returns false if one or more source files for the current spell
## are missing.
##
#---------------------------------------------------------------------
function verify_sources()  {
  verify_source  "`sources  $SPELL`";
}



#---------------------------------------------------------------------
##
## Will set the prefered compression type based on user filled option
## in dialog menu (either gzip/bzip).
## 
#---------------------------------------------------------------------
function set_compression_type() {

  while

    B_HELP="bzip2 compression (slow, small files)"
    G_HELP="gzip compression (fast, larger files)"
    T_HELP="no compression/tar (fastest, largest files)"

    COMMAND=`eval $DIALOG '  --title "Currently using : $COMPRESSBIN "  \
                             --item-help                                \
                             --ok-label      "Select"                   \
                             --cancel-label  "Exit"                     \
                             --menu                                     \
                             ""                                         \
                             0 0 0                                      \
                             "B"  "bzip2 compression"        "$B_HELP"  \
                             "G"  "gzip compression"         "$G_HELP"  \
                             "T"  "no compression/tar"       "$T_HELP"'`

  do

    case  $COMMAND in

      B)  modify_local_config "COMPRESSBIN" "bzip2"  &&
          COMPRESSBIN="bzip2"                        &&
          modify_local_config "EXTENSION" ".bz2"     ;;
      G)  modify_local_config "COMPRESSBIN" "gzip"   &&
          COMPRESSBIN="gzip"                         &&
          modify_local_config "EXTENSION" ".gz"      ;;
      T)  modify_local_config "COMPRESSBIN" "tar"    &&
          COMPRESSBIN="tar"                          &&
          modify_local_config "EXTENSION" ""         ;;

    esac
      
  done

}

#---------------------------------------------------------------------
## @param filename
## @return 0 if filename seems to be compressed
## @return 1 otherwise
## Returns true if the name of the file indicates that it should be
## a compressed file.  In other words, this function returns true if
## the filename ends in .gz, .tgz, .bz2, .zip, .rpm, or .Z.
##
#---------------------------------------------------------------------
function filename_indicates_compression()  {
  local FILENAME=`echo "file$1" | sed 's/^.*\.gz$//'  \
                                | sed 's/^.*\.tgz$//' \
                                | sed 's/^.*\.bz2$//' \
                                | sed 's/^.*\.zip$//' \
                                | sed 's/^.*\.Z$//'   \
                                | sed 's/^.*\.rpm$//' \
                                | sed 's/^.*\.bz2$//'`
  [  -z  "$FILENAME"  ]
}


#---------------------------------------------------------------------
##
## Setup sound menu from existing installed sorcery sound spells.
## Currently no check done for installed sound schemes, just message 
## to user. 
##
## Passes name of chosen scheme to the set_sound_scheme funtion.
## 
#---------------------------------------------------------------------
function sound_schemes_menu() {

		SOUND_HELP="Here you can choose your prefered sound scheme"
    FER_SOUND="Ferris sound scheme"
    MIS_SOUND="Misc sound scheme"
    SIM_SOUND="Simpsons sound scheme"
		STA_SOUND="Startrek sound scheme"
		OFF_SOUND="Sound off"

   if  SOUND_CHECKS=`eval $DIALOG '  --title  "Sound Schemes"    \
                                     --cancel-label  "Exit"      \
                                     --ok-label      "Select"    \
                                     --item-help                 \
                                     --menu                      \
                                     "$SOUND_HELP"               \
                                     0 0 0                       \
                        "OFF"  "$OFF_SOUND"   "$SOUND_HELP"      \
                        "FER"  "$FER_SOUND"   "$SOUND_HELP"      \
                        "MIS"  "$MIS_SOUND"   "$SOUND_HELP"      \
                        "SIM"  "$SIM_SOUND"   "$SOUND_HELP"      \
                        "STA"  "$STA_SOUND" "$SOUND_HELP"'`
  then

    for  CHECK  in  $SOUND_CHECKS;  do
      case  $CHECK  in
        OFF)  modify_local_config "SOUND" "off"  &&
              SOUND=off  
              eval $DIALOG '--msgbox "Sorcery sounds have been turned off." 0 0' 
              ;;
        FER)  set_sound_theme ferris    ;;
        MIS)  set_sound_theme misc      ;;
        SIM)  set_sound_theme simpsons  ;;
        STA)  set_sound_theme startrek  ;;
      esac
    done

	fi
	
}


#---------------------------------------------------------------------
## @param sound scheme name 
##
## Here the passed scheme is set as default sound scheme. 
## If the sound spell is not installed it will be cast for the user.
##
#---------------------------------------------------------------------
function set_sound_theme()  {
	
  modify_local_config "SOUND" "on"        &&
  modify_local_config "SOUND_THEME" "$1"  &&
  SOUND=on                                &&
  SOUND_THEME=$1                          

   
  if  ! spell_installed sorcery-sound-$SOUND_THEME
  then 
    eval $DIALOG '--msgbox "Sorcery has determined that the $SOUND_THEME  \
                            theme must be installed to work. It will now  \
														be cast for you!" 0 0' 
		cast sorcery-sound-$SOUND_THEME
  else
    eval $DIALOG '--msgbox "The $SOUND_THEME theme is installed and ready  \
                            for you to enjoy your new sounds!" 0 0' 
  fi

  goodbye 

}

#---------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#---------------------------------------------------------------------
