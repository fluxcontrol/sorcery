#!/bin/bash
#---------------------------------------------------------------------
##
## @Synopsis Set of functions used by gaze for time calculations
## @Copyright (C) 2008 The Source Mage Team <http://www.sourcemage.org>
##
## This file holds various statistical functions and an interface to
## the activity log for getting the input data.
#---------------------------------------------------------------------

#---------------------------------------------------------------------
##
## Computes all the casting times of the passed spell by inspecting
## the activity log.
##
## @param spell
## @param version (optional)
##
## @Stdout casting time(s)
#---------------------------------------------------------------------
function compute_cast_times() {
  gawk -v spell=$1 -v version=$2 '
    # log timestamps are in the "%Y%m%d:%H%M\(%z\)" format (20080625:0853(+0000))
    # we need them in "%Y %m %d %H %M %S" and %s (epoch time). We ignore the
    # timezone, since the time is stored in UTC and %z is always +0000
    function since_epoch(time,      date) {
      # The date:
      date = substr(time,1,4) " " substr(time,5,2) " " substr(time,7,2)
      # The time (use 00 for seconds):
      date = date " " substr(time,10,2) " " substr(time,12,2) " 00"
      return mktime(date)
    }

    /^.*\tcast\t.*\t.*\t.*\t.*$/ {
      # check the spell and version manually - literally
      if ($3 != spell) next
      if (version != "" && $4 != version) next

      # check all valid start/succes pairs
      if ($5 == "start") {
        start_time = $1
      }
      if ($5 == "success" && start_time != 0) {
        succes_time = $1
        print since_epoch(succes_time)-since_epoch(start_time)
        start_time = 0
      }
  }' $ACTIVITY_LOG
}

#---------------------------------------------------------------------
##
## Display the time in seconds a spell took to compile and install.
## @param spell
## @Stdout cast time of spell in seconds
#---------------------------------------------------------------------
function compute_cast_time() {
  local spell=$1 type=${2:---last}

  compute_cast_times $spell |
  case $type in
  --last)
    tail -n 1 ;;
  --median)
    compute_median ;;
  --mean)
    compute_mean ;;
  esac
}

#---------------------------------------------------------------------
##
## Computes the mean of the passed arguments
##
## @Stdin  numbers separeted by newlines
## @Stdout mean value
#---------------------------------------------------------------------
function compute_mean() {
  gawk '
    BEGIN { n = 0 }

    { sum += $0; n++ }

    END {
      if (n == 0) exit
      print int(sum/n+0.5)
    }'
}

#---------------------------------------------------------------------
##
## Computes the median of the passed arguments
##
## @Stdin  numbers separeted by newlines
## @Stdout median value
#---------------------------------------------------------------------
function compute_median() {
  gawk '
    BEGIN { n = 0 }

    { numbers[n] = $0; n++ }

    END {
      if (n == 0) exit
      if (n == 1) {
        print numbers[0]
      } else {
        asort(numbers)
        print (n % 2) ? numbers[int(n/2+1)] : (numbers[n/2] + numbers[n/2+1])/2
      }
    }'
}

#---------------------------------------------------------------------
## @License
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#---------------------------------------------------------------------
